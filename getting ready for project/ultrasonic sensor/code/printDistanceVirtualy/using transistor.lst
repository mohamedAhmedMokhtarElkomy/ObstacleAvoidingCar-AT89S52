
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	C:\Microcontroller project\microprocessor\ultrasonic sensor\code\printDistanceVirtualy\using transistor.asm
	Object File:	C:\Microcontroller project\microprocessor\ultrasonic sensor\code\printDistanceVirtualy\using transistor.hex
	List File:	C:\Microcontroller project\microprocessor\ultrasonic sensor\code\printDistanceVirtualy\using transistor.lst



 Line  I  Addr  Code            Source

    1:				;R5 is used in DLOOP for POPing from stack
    2:				;R6 is used in printing, storing ECHO times to be printed
    3:				;R7 is used in all Delays, as counter in DLOOP
    4:		N      0000	ORG 0
    5:	  0000	02 01 00	JMP program
    6:
    7:		N      000B	ORG 000BH
    8:	  000B	02 01 9A	JMP intof
    9:
   10:
   11:
   12:		N      0100	ORG 100H
   13:	  0100			program:
   14:	  0100	75 90 00	MOV P1,#00000000B      ; sets P1 as output port
   15:	  0103	75 80 00	MOV P0,#00000000B      ; sets P0 as output port
   16:
   17:		B      00A0	TRIG EQU P2.0
   18:	  0106	C2 A0		CLR TRIG               ; sets TRIG as output for sending trigger
   19:
   20:		B      00A1	ECHO EQU P2.1
   21:	  0108	D2 A1		SETB ECHO              ; sets ECHO as input for receiving echo
   22:
   23:		B      00A2	USGROUND EQU P2.2
   24:	  010A	D2 A2		SETB USGROUND
   25:
   26:	  010C	74 00		MOV A, #0H
   27:	  010E	75 A8 82	MOV IE, #10000010B	;enable external interrupts IE0, IE1
   28:	  0111			MAIN:   ;TRIG CODE
   29:	  0111	C2 90			CLR P1.0
   30:	  0113	D2 A0			SETB TRIG		; starts the trigger pulse
   31:	  0115	31 81			ACALL Delay10M     	; Delay 10uS width for the trigger pulse
   32:	  0117	C2 A0			CLR TRIG         	; ends the trigger pulse
   33:	  0119	30 A1 FD		JNB ECHO,$    		; loops here until echo is received
   34:
   35:	  011C	31 50			ACALL CalcDistance
   36:
   37:					;ACALL DelaySec	 ;Delay 1 sec

   38:	  011E	80 F1			SJMP MAIN        ;short jumps to MAIN loop
   39:
   40:				;Display LOOP for send char to serial port for printing it on virtual terminal
   41:	  0120	75 89 20	DLOOP:	MOV TMOD, #20H	; or 00100000B => Mode 2 for Timer 1 (8bit Auto Reload)
   42:	  0123	75 8D FD		MOV TH1, #0FDH	;Setting BaudRate of 9600 (-3). SMOD is 0 by default

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   43:	  0126	75 98 50		MOV SCON, #50H	;Serial Mode 1, REN Enabled or #01010000B
   44:	  0129	D2 8E			SETB TR1
   45:
   46:	  012B	EE			MOV A, R6
   47:	  012C	7F 00			MOV R7, #0D	;Counter to store count of numbers
   48:				;PrintDEC, print => for converting hex value to decimal then print each number
   49:	  012E				PrintDEC:
   50:	  012E	0F				INC R7
   51:	  012F	75 F0 0A			MOV B, #10D
   52:	  0132	84				DIV AB			;the quotient is stored in the accumulator and the remainder
				 is stored in the B register
   53:	  0133	C0 F0				PUSH B
   54:	  0135	B4 00 F6			CJNE A, #0D, PrintDEC	;Compare the first two operands and branches to the specifie
				d destination if their values are not equal
   55:
   56:	  0138	D0 05			print:	POP 05H			;POP to 05H which is R5
   57:	  013A	ED				MOV A, R5
   58:	  013B	24 30				ADD A, #'0'		;Add 0 hex value to print number from 0 to 9
   59:	  013D	F5 99				MOV SBUF, A
   60:	  013F	30 99 FD			JNB TI, $
   61:	  0142	C2 99				CLR TI
   62:						;ACALL DelaySec		;TODO i think it is not useful
   63:	  0144	DF F2				DJNZ R7, print		;decrements the byte indicated by the first operand and, if
				the resulting value is not zero, branches to the address specified in the second operand.
   64:	  0146	74 20				MOV A, #' '
   65:	  0148	F5 99				MOV SBUF, A
   66:	  014A	30 99 FD			JNB TI, $
   67:	  014D	C2 99				CLR TI
   68:
   69:	  014F	22		RET
   70:
   71:	  0150			CalcDistance:
   72:					;Loop until ECHO pin is low
   73:	  0150	75 89 01		MOV TMOD, #00000001B	;set timer0 as mode 1 16-bit
   74:					;Start counting ticks from 44103D => AC47
   75:	  0153	75 8A 47		MOV TL0, #47H
   76:	  0156	75 8C AC		MOV TH0, #0ACH
   77:
   78:	  0159	D2 8C			SETB TR0	;start timer 0
   79:
   80:					;TODO LOOP while ECHO 1 and TF0 is 0
   81:					;JB ECHO, $	;If ECHO is high loop to echo is 1
   82:					;CLR TR0
   83:
   84:	  015B	20 A1 03		checkecho:JB ECHO, checkof
   85:	  015E	02 01 6A		JMP clear
   86:	  0161	20 8D 02		checkof:JB TF0, restart
   87:	  0164	80 F5				JMP checkecho
   88:
   89:	  0166	C2 A2		restart:CLR P2.2
   90:					;ACALL DelaySec
   91:					;ACALL DelaySec
   92:	  0168	D2 A2			SETB P2.2
   93:
   94:	  016A	C2 8C			clear:CLR TR0
   95:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   96:					;Subroutine UDIV32
   97:				;32-Bit / 16-Bit to 32-Bit Quotient & Remainder Unsigned Divide
   98:				;input: r3, r2, rl, r0 = Dividend X
   99:				;D, r4 = Divisor Y
  100:				;output: r3, r2, r1, r0 = quotient Q of division Q = X/ Y
  101:				;r7, r6, r5, r4 = remainder
  102:				;alters: acC, Tlags
  103:
  104:	  016C	7B 00			MOV R3, #0
  105:	  016E	7A 00			MOV R2, #0
  106:	  0170	A9 8C			MOV R1, TH0
  107:	  0172	A8 8A			MOV R0, TL0
  108:
  109:	  0174	7D 00			MOV R5, #0
  110:	  0176	7C 3A			MOV R4, #58
  111:
  112:	  0178	31 9D			ACALL UDIV32
  113:
  114:	  017A	E9			MOV A, R1
  115:	  017B	FE			MOV R6, A
  116:
  117:					;Move TH0 to R6 to be printed
  118:				;	MOV R6, TH0
  119:				;	ACALL DLOOP
  120:
  121:	  017C	E8			MOV A, R0
  122:	  017D	FE			MOV R6, A
  123:					;Move TL0 to R6 to be printed
  124:					;MOV R6, TL0
  125:	  017E	31 20			ACALL DLOOP
  126:	  0180	22		RET
  127:
  128:
  129:
  130:				;Delay 10 micro sec
  131:	  0181			Delay10M:
  132:	  0181	7E 02			MOV R6,#2D     ; 10uS delay
  133:	  0183	DE FE		LABEL1: DJNZ R6,LABEL1
  134:	  0185	22		        RET
  135:	  0186	22		RET
  136:
  137:				;Delay 1000 micro sec
  138:	  0187			Delay1000M:
  139:	  0187	75 89 01		MOV TMOD, #00000001B ;set timer0 as mode 2 16-bit
  140:					;MOV TL0, #66H
  141:					;MOV TH0, #0FCH
  142:
  143:	  018A	75 8A 47		MOV TL0, #47H
  144:	  018D	75 8C AC		MOV TH0, #0ACH
  145:
  146:	  0190	D2 8C			SETB TR0
  147:
  148:	  0192	30 8D FD		JNB TF0, $
  149:	  0195	C2 8C			CLR TR0
  150:	  0197	C2 8D			CLR TF0
  151:	  0199	22		RET

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  152:
  153:
  154:	  019A			intof:
  155:	  019A	D2 90		SETB P1.0
  156:	  019C	32		RETI
  157:
  158:
  159:
  160:
  161:
  162:
  163:
  164:
  165:
  166:
  167:
  168:
  169:
  170:
  171:
  172:
  173:
  174:
  175:
  176:				;Subroutine UDIV32
  177:				;32-Bit / 16-Bit to 32-Bit Quotient & Remainder Unsigned Divide
  178:				;input: r3, r2, rl, r0 = Dividend X
  179:				;D, r4 = Divisor Y
  180:				;output: r3, r2, r1, r0 = quotient Q of division Q = X/ Y
  181:				;r7, r6, r5, rd = remainder
  182:				;alters: acC, Tlags
  183:	  019D	C0 08		UDIV32: push 08 ;Save Register Bank 1
  184:	  019F	C0 09			push 09
  185:	  01A1	C0 0A			push 0AH
  186:	  01A3	C0 0B			push 0BH
  187:	  01A5	C0 0C			push 0CH
  188:	  01A7	C0 0D			push 0DH
  189:	  01A9	C0 0E			push 0EH
  190:	  01AB	C0 0F			push 0FH
  191:	  01AD	C0 82			push dpl
  192:	  01AF	C0 83			push dph
  193:	  01B1	C0 F0			push B
  194:	  01B3	D2 D3			setb RS0 ;Select Register Bank 1
  195:	  01B5	7F 00			mov r7, #0 ;clear partial remainder
  196:	  01B7	7E 00			mov r6, #0
  197:	  01B9	7D 00			mov r5, #0
  198:	  01BB	7C 00			mov r4, #0
  199:	  01BD	75 F0 20		mov B, #32 ;Set loop coutt
  200:	  01C0	C2 D3		div_lp32: clr RS0 ;Select Register Bank
  201:	  01C2	C3			clr C ;clear carry flag
  202:	  01C3	E8			mov a, r0 ;shift the highest bit of the
  203:	  01C4	33			rlc a ;dividend into...
  204:	  01C5	F8			mov r0, a
  205:	  01C6	E9			mov a, r1
  206:	  01C7	33			rlc a
  207:	  01C8	F9			mov r1, a

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  208:	  01C9	EA			mov a, r2
  209:	  01CA	33			rlc a
  210:	  01CB	FA			mov r2, a
  211:	  01CC	EB			mov a, r3
  212:	  01CD	33			rlc a
  213:	  01CE	FB			mov r3,a
  214:	  01CF	D2 D3			setb RS0 ;Select Register Bank 1
  215:	  01D1	EC			mov a, r4;...the lowest bit of the
  216:	  01D2	33			rlc a; partial remainder
  217:	  01D3	FC			mov r4, a
  218:	  01D4	ED			mov a, r5
  219:	  01D5	33			rlc a
  220:	  01D6	FD			mov r5, a
  221:	  01D7	EE			mov a, r6
  222:	  01D8	33			rlc a
  223:	  01D9	FE			mov r6, a
  224:	  01DA	EF			mov a, r7
  225:	  01DB	33			rlc a
  226:	  01DC	FF			mov r7, a
  227:	  01DD	EC			mov a, r4;trial subt ract divisor from
  228:	  01DE	C3			clr C;partial remainder
  229:	  01DF	95 04			subb a, 04
  230:	  01E1	F5 82			mov dpl, a
  231:	  01E3	ED			mov a, r5
  232:	  01E4	95 05			subb a, 05
  233:	  01E6	F5 83			mov dph, a
  234:	  01E8	EE			mov a, r6
  235:	  01E9	94 00			subb a, #0
  236:	  01EB	F5 06			mov 06, a
  237:	  01ED	EF			mov a, r7
  238:	  01EE	94 00			subb a, #0
  239:	  01F0	F5 07			mov 07, a
  240:	  01F2	B3			cpl C;Complement external borrow
  241:	  01F3	50 08			jnc div_321;update partial remainder if borrow
  242:	  01F5	AF 07			mov r7, 07;update partial remainder
  243:	  01F7	AE 06			mov r6, 06
  244:	  01F9	AD 83			mov r5, dph
  245:	  01FB	AC 82			mov r4, dpl
  246:	  01FD	E8		div_321: mov a, r0;shift result bit into partial
  247:	  01FE	33			rlc a;quotient
  248:	  01FF	F8			mov r0, a
  249:	  0200	E9			mov a, r1
  250:	  0201	33			rlc a
  251:	  0202	F9			mov r1, a
  252:	  0203	EA			mov a, r2
  253:	  0204	33			rlc a
  254:	  0205	FA			mov r2, a
  255:	  0206	EB			mov a, r3
  256:	  0207	33			rlc a
  257:	  0208	FB			mov r3,a
  258:	  0209	D5 F0 B4		djnz B, div_lp32
  259:	  020C	8F 07			mov 07, r7;put remainder, saved before the
  260:	  020E	8E 06			mov 06,r6;last subt raction, in bank 0
  261:	  0210	8D 05			mov 05, r5
  262:	  0212	8C 04			mov 04, r4
  263:	  0214	8B 03			mov 03, r3;put quotient in bank 0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  264:	  0216	8A 02			mov 02, r2
  265:	  0218	89 01			mov 01, r1
  266:	  021A	88 00			mov 00, r0
  267:	  021C	C2 D3			clr RS0
  268:	  021E	D0 F0			pop B
  269:	  0220	D0 83			pop dph
  270:	  0222	D0 82			pop dpl
  271:	  0224	D0 0F			pop 0FH;Retrieve Register Bank 1
  272:	  0226	D0 0E			pop 0EH
  273:	  0228	D0 0D			pop 0DH
  274:	  022A	D0 0C			pop 0CH
  275:	  022C	D0 0B			pop 0BH
  276:	  022E	D0 0A			pop 0AH
  277:	  0230	D0 09			pop 09
  278:	  0232	D0 08			pop 08
  279:	  0234	22		ret
  280:
  281:
  282:
  283:	  0235			close:
  284:					END





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CALCDISTANCE			  CODE	    0150	  71
CHECKECHO			  CODE	    015B	  84
CHECKOF				  CODE	    0161	  86
CLEAR				  CODE	    016A	  94
CLOSE				  CODE	    0235	 283
CY				  BIT	      D7
DELAY1000M			  CODE	    0187	 138
DELAY10M			  CODE	    0181	 131
DIV_321				  CODE	    01FD	 246
DIV_LP32			  CODE	    01C0	 200
DLOOP				  CODE	    0120	  41
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ECHO				  NUMBER    00A1	  20
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
INTOF				  CODE	    019A	 154
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
LABEL1				  CODE	    0183	 133
MAIN				  CODE	    0111	  28
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PRINT				  CODE	    0138	  56
PRINTDEC			  CODE	    012E	  49
PROGRAM				  CODE	    0100	  13
PS				  BIT	      BC

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RESTART				  CODE	    0166	  89
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TRIG				  NUMBER    00A0	  17
TXD				  BIT	      B1
UDIV32				  CODE	    019D	 183
USGROUND			  NUMBER    00A2	  23
WR				  BIT	      B6
