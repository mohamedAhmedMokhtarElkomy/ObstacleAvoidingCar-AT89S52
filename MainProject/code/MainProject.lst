
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	C:\Microcontroller project\microprocessor\MainProject\code\MainProject.asm
	Object File:	C:\Microcontroller project\microprocessor\MainProject\code\MainProject.hex
	List File:	C:\Microcontroller project\microprocessor\MainProject\code\MainProject.lst



 Line  I  Addr  Code            Source

    1:		N      0000	ORG 0000H; location where execution of the program starts from
    2:	  0000	02 00 30	LJMP START; LJMP used to bypass the ISR
    3:
    4:		N      0023	ORG 0023H; location for ISR for both TI and RI
    5:	  0023	02 01 DA	LJMP SERIALINT
    6:
    7:				;R4 store received character
    8:				;R3 for storing value of TH from ultrasonic echo
    9:		N      0030	ORG 30H
   10:	  0030			START:
   11:
   12:		B      0083	LeftForward EQU P0.3
   13:		B      0082	LeftBackward EQU P0.2
   14:		B      0081	RightForward EQU P0.1
   15:		B      0080	RightBackward EQU P0.0
   16:
   17:		B      00A5	AutoLED EQU P2.5	;LED indicate if Auto mode is on or not
   18:		B      00A7	OnLED EQU P2.7
   19:		B      00A6	DetectedPin EQU P2.6	;LED indicate if object detected or not
   20:
   21:	  0030	C2 A6		CLR DetectedPin
   22:	  0032	C2 A7		CLR OnLED
   23:	  0034	C2 A5		CLR AutoLED
   24:
   25:		B      00A3	TRIG EQU P2.3
   26:		B      00A4	ECHO EQU P2.4
   27:
   28:	  0036	C2 A3		CLR TRIG		; sets P2.0(TRIG) as output for sending trigger
   29:	  0038	D2 A4		SETB ECHO		; sets P2.1(ECHO) as input for receiving echo
   30:
   31:	  003A	C2 83		CLR LeftForward		; sets P1.0(LeftForward) as output
   32:	  003C	C2 82		CLR LeftBackward	; sets P1.1(LeftBackward) as output
   33:	  003E	C2 81		CLR RightForward	; sets P1.2(RightForward) as output
   34:	  0040	C2 80		CLR RightBackward	; sets P1.3(RightBackward) as output
   35:
   36:		B	 A0	RS BIT P2.0
   37:		B	 A1	RW BIT P2.1
   38:		B	 A2	EN  BIT P2.2
   39:		D      0090	DATABUS EQU P1
   40:		B	 97	LCD_F BIT P1.7
   41:
   42:				;LCD INITIALIZATION
   43:	  0042	74 38		MOV A, #38H	; INITIATE LCD

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:	  0044	31 75		ACALL COMMANDWRT
   45:
   46:	  0046	74 0F		MOV A, #0FH	; DISPLAY ON CURSOR ON
   47:	  0048	31 75		ACALL COMMANDWRT
   48:
   49:	  004A	74 01		MOV A, #01H	; CLEAR LCD
   50:	  004C	31 75		ACALL COMMANDWRT
   51:
   52:				;Setup serial port and timer 1 for bluetooth
   53:	  004E	75 89 21	MOV TMOD, #00100001B	;Mode 2 for timer 1 (8 bit auto reload)
   54:	  0051	75 8D FD	MOV TH1, #0FDH		;setting baud rate 9600
   55:	  0054	75 98 50	MOV SCON, #01010000B	;Serial Mode 1, REN Enabled
   56:	  0057	D2 8E		SETB TR1		;Run timer 1
   57:
   58:	  0059	D2 A7		SETB OnLED		;Turn on LED that indicates that power is ON
   59:
   60:	  005B			NormalMode:
   61:					;The following instructions to reset when returning from AutoDriveMode
   62:	  005B	C2 A5			CLR AutoLED
   63:	  005D	11 B0			ACALL StopCar
   64:	  005F	75 A8 90		MOV IE, #10010000B	;enables interrupt and Stop serial interrupt from auto mode
   65:
   66:				;TODO Make Normal mode work on serial interrupts for let ultrasonic works
   67:	  0062	20 A5 0F	Main:	JB AutoLED, AutoDriveMode	;IF Auto LED turned on from the interrupt so jmp to auto dri
				ve mode
   68:	  0065	D2 A3			SETB TRIG		; starts the trigger pulse
   69:	  0067	31 30			ACALL Delay10M     	; Delay 10uS width for the trigger pulse
   70:	  0069	C2 A3			CLR TRIG         	; ends the trigger pulse
   71:
   72:	  006B	30 A4 FD		JNB ECHO,$    		; loops here until echo is received
   73:
   74:	  006E	11 F8			ACALL ECHOroutine
   75:	  0070	31 40			ACALL DelayHalfSec		;TODO i think it is not useful
   76:				;SETB TRIG		; starts the trigger pulse
   77:				;	ACALL Delay10M     	; Delay 10uS width for the trigger pulse
   78:				;	CLR TRIG         	; ends the trigger pulse
   79:
   80:				;	JNB ECHO,$    		; loops here until echo is received
   81:
   82:					;ACALL CalcDistance
   83:	  0072	80 EE			SJMP Main	;Jump back to Main for looping
   84:				;;;;;;TRY TO OPTIMIZE;;;;;;
   85:
   86:
   87:				;AutoDriveMode is mode for auto move and detect objects
   88:	  0074			AutoDriveMode:
   89:	  0074	75 A8 90		MOV IE, #10010000B	;enables serial interrupt which can be caused by both TI/RI
   90:	  0077	D2 A5			SETB AutoLED		;Turn on auto drive LED
   91:
   92:	  0079			TrigAgain:
   93:	  0079	C3			CLR C
   94:	  007A	30 A5 DE		JNB AutoLED, NormalMode	;IF autoLed pin is 0 JMP to NormalMode
   95:
   96:	  007D	D2 A3			SETB TRIG		; starts the trigger pulse
   97:	  007F	31 30			ACALL Delay10M     	; Delay 10uS width for the trigger pulse
   98:	  0081	C2 A3			CLR TRIG         	; ends the trigger pulse

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   99:
  100:	  0083	30 A4 FD		JNB ECHO,$    		; loops here until echo is received
  101:
  102:	  0086	11 F8			ACALL ECHOroutine
  103:					;TODO when transistor be used
  104:					;JB TF0, NoObj
  105:					;ACALL Detected
  106:
  107:				;	SJMP TrigAgain
  108:
  109:	  0088	11 8C			ACALL MoveForward	;Default for automode to move forward
  110:	  008A	80 ED			SJMP TrigAgain		;short jumps to again loop
  111:
  112:	  008C			MoveForward:
  113:	  008C	C2 80			CLR RightBackward
  114:	  008E	C2 82			CLR LeftBackward
  115:	  0090	D2 81			SETB RightForward
  116:	  0092	D2 83			SETB LeftForward
  117:					;ACALL FeedBck
  118:	  0094	22			RET
  119:
  120:	  0095			MoveBackward:
  121:	  0095	C2 81			CLR RightForward
  122:	  0097	C2 83			CLR LeftForward
  123:	  0099	D2 80			SETB RightBackward
  124:	  009B	D2 82			SETB LeftBackward
  125:					;ACALL FeedBck
  126:	  009D	22			RET
  127:
  128:	  009E			MoveRight:
  129:	  009E	C2 80			CLR RightBackward
  130:	  00A0	C2 82			CLR LeftBackward
  131:	  00A2	C2 81			CLR RightForward
  132:	  00A4	D2 83			SETB LeftForward
  133:					;ACALL FeedBck
  134:	  00A6	22			RET
  135:
  136:	  00A7			MoveLeft:
  137:	  00A7	D2 81			SETB RightForward
  138:	  00A9	C2 83			CLR LeftForward
  139:	  00AB	C2 80			CLR RightBackward
  140:	  00AD	C2 82			CLR LeftBackward
  141:					;ACALL FeedBck
  142:	  00AF	22			RET
  143:
  144:	  00B0			StopCar:
  145:	  00B0	C2 80			CLR RightBackward
  146:	  00B2	C2 82			CLR LeftBackward
  147:	  00B4	C2 81			CLR RightForward
  148:	  00B6	C2 83			CLR LeftForward
  149:					;ACALL FeedBck
  150:	  00B8	22			RET
  151:
  152:				;If object detected MoveBack for 1 sec then move right for 2 sec
  153:	  00B9			Detected:
  154:	  00B9	D2 A6			SETB DetectedPin

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  155:	  00BB	30 A5 0C		JNB AutoLED, NormalDET	;If in normal form just give warning
  156:	  00BE	11 95			ACALL MoveBackward
  157:	  00C0	31 58			ACALL DelaySec
  158:	  00C2	11 9E			ACALL MOVERight
  159:	  00C4	31 58			ACALL DelaySec
  160:	  00C6	31 58			ACALL DelaySec
  161:	  00C8	C2 A6			CLR DetectedPin
  162:
  163:	  00CA			NormalDET:
  164:	  00CA	22			RET
  165:
  166:				;R6 is the input for sub routine
  167:				;R7 is used as counter
  168:				;R5 as temp register for data poped from stack
  169:				;Display LOOP for printing input on LCD Screen
  170:	  00CB	C0 06		DLOOP:	PUSH 06H
  171:	  00CD	C0 07			PUSH 07H
  172:
  173:					;CLEAR LCD
  174:	  00CF	74 01			MOV A, #01H
  175:	  00D1	31 75			ACALL COMMANDWRT
  176:
  177:	  00D3	EE			MOV A, R6
  178:	  00D4	7F 00			MOV R7, #0D	;Counter to store count of numbers
  179:
  180:				;PrintDEC, print => for converting hex value to decimal then print each number
  181:	  00D6				PrintDEC:
  182:	  00D6	0F				INC R7
  183:	  00D7	75 F0 0A			MOV B, #10D
  184:	  00DA	84				DIV AB			;the quotient is stored in the accumulator and the remainder
				 is stored in the B register
  185:	  00DB	C0 F0				PUSH B
  186:	  00DD	B4 00 F6			CJNE A, #0D, PrintDEC	;Compare the first two operands and branches to the specifie
				d destination if their values are not equal
  187:	  00E0	75 F0 0A		MOV B, #10D
  188:	  00E3	FB			MOV R3, A
  189:	  00E4	84			DIV AB
  190:	  00E5	C0 03			PUSH 03
  191:	  00E7	0F			INC R7
  192:
  193:	  00E8	D0 05			print:	POP 05H			;POP to 05H which is R5
  194:	  00EA	ED				MOV A, R5
  195:	  00EB	24 30				ADD A, #'0'		;Add 0 hex value to print number from 0 to 9
  196:	  00ED	F9				MOV R1, A;TODO REMOVE
  197:	  00EE	12 01 70			CALL SENDCHAR		;PRINTING A CHARACTER
  198:	  00F1	DF F5				DJNZ R7, print		;decrements the byte indicated by the first operand and, if
				the resulting value is not zero, branches to the address specified in the second operand.
  199:
  200:
  201:	  00F3	D0 07			POP 07H
  202:	  00F5	D0 06			POP 06H
  203:	  00F7	22		RET
  204:
  205:	  00F8			ECHOroutine:
  206:					;Loop until ECHO pin is low
  207:					;Start counting ticks from 44103D => AC47

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  208:					;44103D for maximum distance from 44103D to 65536 equal 4 meters
  209:					;
  210:	  00F8	75 8A 47		MOV TL0, #47H
  211:	  00FB	75 8C AC		MOV TH0, #0ACH
  212:
  213:	  00FE	C2 8D			CLR TF0
  214:
  215:	  0100	D2 8C			SETB TR0	;start timer 0
  216:
  217:					;TODO LOOP while ECHO 1 and TF0 is 0
  218:	  0102	20 A4 FD		JB ECHO, $	;While ECHO is while stay here
  219:	  0105	C2 8C			CLR TR0
  220:	  0107	C2 8D			CLR TF0
  221:
  222:					;Calculate and print distance
  223:	  0109	31 19			ACALL CalcDistance
  224:
  225:					;Check if distance is less that 1 meter or not
  226:					;C135H => over 98cm, C235H => over 101cm
  227:				;	MOV A, #0C2H	;
  228:	  010B	74 B1			MOV A, #0B1H
  229:	  010D	C3			CLR C
  230:	  010E	95 8C			SUBB A, TH0
  231:	  0110	54 80			ANL A, #10000000B	;Check first bit if 1 (-ve) Distance greater than 1 meter if 0 (+ve)
				 Distance less than 1 meter
  232:	  0112	C2 A6			CLR DetectedPin
  233:	  0114	70 02			JNZ NoObj		;If 0 then no object in distance less than 1 meter
  234:
  235:					;TODO not useful
  236:					;MOV A, #35H
  237:					;CLR C
  238:					;SUBB A, TL0
  239:					;ANL A, #10000000B
  240:					;JNZ NoObj
  241:
  242:					;If else first bit is 1 then object detected in distance less than 1 meter
  243:	  0116	11 B9			ACALL Detected
  244:
  245:
  246:					;TODO if transistor is needed
  247:					;CheckECHO:JB ECHO, CheckOF
  248:					;	JMP d
  249:					;CheckOF: JNB TF0, CheckECHO
  250:							;IF else
  251:						;ACALL RestartUS
  252:
  253:	  0118	22		NoObj:	RET
  254:
  255:				;CalcDistance calculate distance in cm from number of tick by divide ticks / 58D
  256:				;Then print the distance
  257:				;R3, R2 = R1 R0 / R3 R2
  258:	  0119			CalcDistance:
  259:					;Prepare R1 for div_16
  260:	  0119	C3			CLR C
  261:	  011A	E5 8C			MOV A, TH0
  262:	  011C	94 AC			SUBB A, #0ACH	;Subtract ACH from TH0 which was the starting ticks

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  263:	  011E	F9			MOV R1, A	;R1 used for div_16
  264:
  265:					;Prepare R0 for div_16
  266:	  011F	C3			CLR C
  267:	  0120	E5 8A			MOV A, TL0
  268:	  0122	94 47			SUBB A, #47H
  269:	  0124	F8			MOV R0, A
  270:
  271:					;Prepare R3 & R2 for div_16
  272:	  0125	7B 00			MOV R3, #0
  273:	  0127	7A 3A			MOV R2, #58D
  274:
  275:	  0129	31 A2			ACALL DIV_16	;R3, R2 = R1 R0 / R3 R2
  276:	  012B	EA			MOV A, R2	;Store returned value in
  277:	  012C	FE			MOV R6, A	;Move a to R6 that is used in Printing
  278:
  279:					;Print distance in decimal
  280:	  012D	11 CB			ACALL DLOOP
  281:	  012F	22		RET
  282:
  283:				;TODO if transistor is required
  284:				;restart ultrasonic sensor
  285:				;RestartUS:
  286:				;CLR TR0
  287:				;RET
  288:
  289:				;Delay 10 micro sec
  290:	  0130			Delay10M:
  291:					;MOV TMOD, #00000001B ;set timer0 as mode 1 16-bit
  292:	  0130	75 8A F7		MOV TL0, #0F7H
  293:	  0133	75 8C FF		MOV TH0, #0FFH
  294:
  295:	  0136	D2 8C			SETB TR0
  296:
  297:	  0138	30 8D FD		JNB TF0, $
  298:	  013B	C2 8C			CLR TR0
  299:	  013D	C2 8D			CLR TF0
  300:	  013F	22		RET
  301:
  302:	  0140			DelayHalfSec:
  303:	  0140	C0 07		PUSH 07H
  304:	  0142	7F 0A		    	MOV R7, #10D
  305:				    	;Timer Clk = 11.0592/12*1 = 0.9216 MHz
  306:					;50000 uS / (1 / 0.9216)uS = 46080 [65536 - 46080 = 19456 => 4C00H]
  307:	  0144				DelayhlfSecLoop:
  308:	  0144	75 8A 00	    		MOV TL0, #00H
  309:	  0147	75 8C 4C	    		MOV TH0, #4CH
  310:	  014A	D2 8C		    		SETB TR0	;Start timer 0
  311:
  312:	  014C	30 8D FD	    		JNB TF0, $	;Loop until Timer 0 overflow = 1
  313:	  014F	C2 8C		    		CLR TR0		;Stop timer 0
  314:	  0151	C2 8D		    		CLR TF0		;Clear overFlow
  315:
  316:	  0153	DF EF		    		DJNZ R7, DelayhlfSecLoop ;Decrement A then if A != 0 jump to DelaySecLoop
  317:
  318:	  0155	D0 07		    	POP 07H

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  319:	  0157	22		RET
  320:	  0158			DelaySec:
  321:	  0158	C0 07			PUSH 07H
  322:	  015A	7F 14		    	MOV R7, #20D
  323:				    	;Timer Clk = 11.0592/12*1 = 0.9216 MHz
  324:					;50000 uS / (1 / 0.9216)uS = 46080 [65536 - 46080 = 19456 => 4C00H]
  325:	  015C				DelaySecLoop:
  326:	  015C	75 8A 00	    		MOV TL0, #00H
  327:	  015F	75 8C 4C	    		MOV TH0, #4CH
  328:	  0162	D2 8C		    		SETB TR0	;Start timer 0
  329:
  330:	  0164	30 8D FD	    		JNB TF0, $	;Loop until Timer 0 overflow = 1
  331:	  0167	C2 8C		    		CLR TR0		;Stop timer 0
  332:	  0169	C2 8D		    		CLR TF0		;Clear overFlow
  333:
  334:	  016B	DF EF		    		DJNZ R7, DelaySecLoop ;Decrement A then if A != 0 jump to DelaySecLoop
  335:
  336:	  016D	D0 07		    	POP 07H
  337:	  016F	22		RET
  338:
  339:
  340:				;SENDING A CHARACHTER SUBROUTINE
  341:	  0170			SENDCHAR:
  342:	  0170	31 82			ACALL DATAWRT
  343:	  0172	31 94			ACALL DELAY
  344:	  0174	22			RET
  345:
  346:				;COMMAND SUB-ROUTINE FOR LCD CONTROL
  347:	  0175			COMMANDWRT:
  348:
  349:	  0175	F5 90		    	MOV P1, A ;SEND DATA TO P1
  350:	  0177	C2 A0			CLR RS	;RS=0 FOR COMMAND
  351:	  0179	C2 A1			CLR RW	;R/W=0 FOR WRITE
  352:	  017B	D2 A2			SETB EN	;E=1 FOR HIGH PULSE
  353:	  017D	31 94			ACALL DELAY
  354:	  017F	C2 A2			CLR EN	;E=0 FOR H-L PULSE
  355:
  356:	  0181	22			RET
  357:
  358:				;SUBROUTINE FOR DATA LACTCHING TO LCD
  359:	  0182			DATAWRT:
  360:
  361:	  0182	F5 90			MOV DATABUS, A
  362:	  0184	D2 A0		    	SETB RS	;RS=1 FOR DATA
  363:	  0186	C2 A1		    	CLR RW
  364:	  0188	D2 A2		    	SETB EN
  365:	  018A	31 94		    	ACALL DELAY
  366:	  018C	C2 A2			CLR EN
  367:
  368:	  018E	22			RET
  369:
  370:	  018F			DELAY10Mreg:
  371:	  018F	7E 02			MOV R6,#2D	;10uS delay
  372:	  0191	DE FE			DJNZ R6, $
  373:	  0193	22		        RET
  374:	  0194			DELAY:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  375:	  0194	78 0A		    	MOV R0, #10	;DELAY. HIGHER VALUE FOR FASTER CPUS
  376:	  0196	79 FF		Y:	MOV R1, #255
  377:	  0198	D9 FE			DJNZ R1, $
  378:	  019A	D8 FA			DJNZ R0, Y
  379:
  380:	  019C	22			RET
  381:
  382:	  019D			DELAY1m:
  383:	  019D	7F FA			MOV R7,#250D	;1mS delay
  384:	  019F	DF FE			DJNZ R7, $
  385:	  01A1	22		        RET
  386:
  387:				;16bit division
  388:				; R1 R0
  389:				; / R3 R2
  390:				; = R3 R2
  391:				; shift left the divisor such that the number of digits
  392:				; in the divisor is the same as the number of digits in the dividend
  393:				; shift right the divisor and substract this shifted divisor from the dividend
  394:				; repeat the process again until the divisor has shifted into its original position
  395:	  01A2			DIV_16:
  396:	  01A2	C3			CLR C 	;Clear carry initially
  397:	  01A3	7C 00			MOV R4,#00h	;Clear R4 working variable initially
  398:	  01A5	7D 00			MOV R5,#00h	;CLear R5 working variable initially
  399:	  01A7	75 F0 00		MOV B,#00h 	;Clear B since B will count the number of left-shifted bits
  400:	  01AA			lshift:
  401:	  01AA	05 F0			INC B 	;Increment counter for each left shift
  402:	  01AC	EA			MOV A,R2 	;Move the current divisor low byte into the accumulator
  403:	  01AD	33			RLC A 	;Shift low-byte left, rotate through carry to apply highest bit to high-byte
  404:	  01AE	FA			MOV R2,A 	;Save the updated divisor low-byte
  405:	  01AF	EB			MOV A,R3 	;Move the current divisor high byte into the accumulator
  406:	  01B0	33			RLC A 	;Shift high-byte left high, rotating in carry from low-byte
  407:	  01B1	FB			MOV R3,A 	;Save the updated divisor high-byte
  408:	  01B2	50 F6			JNC lshift 	;Repeat until carry flag is set from high-byte
  409:	  01B4			rshift: 		;Shift right the divisor
  410:	  01B4	EB			MOV A,R3 	;Move high-byte of divisor into accumulator
  411:	  01B5	13			RRC A 	;Rotate high-byte of divisor right and into carry
  412:	  01B6	FB			MOV R3,A 	;Save updated value of high-byte of divisor
  413:	  01B7	EA			MOV A,R2 	;Move low-byte of divisor into accumulator
  414:	  01B8	13			RRC A 	;Rotate low-byte of divisor right, with carry from high-byte
  415:	  01B9	FA			MOV R2,A 	;Save updated value of low-byte of divisor
  416:	  01BA	C3			CLR C 	;Clear carry, we don't need it anymore
  417:	  01BB	89 07			MOV 07h,R1 	;Make a safe copy of the dividend high-byte
  418:	  01BD	88 06			MOV 06h,R0 	;Make a safe copy of the dividend low-byte
  419:	  01BF	E8			MOV A,R0 	;Move low-byte of dividend into accumulator
  420:	  01C0	9A			SUBB A,R2 	;Dividend - shifted divisor = result bit (no factor, only 0 or 1)
  421:	  01C1	F8			MOV R0,A 	;Save updated dividend
  422:	  01C2	E9			MOV A,R1 	;Move high-byte of dividend into accumulator
  423:	  01C3	9B			SUBB A,R3 	;Subtract high-byte of divisor (all together 16-bit substraction)
  424:	  01C4	F9			MOV R1,A 	;Save updated high-byte back in high-byte of divisor
  425:	  01C5	50 04			JNC result 	;If carry flag is NOT set, result is 1
  426:	  01C7	A9 07			MOV R1,07h 	;Otherwise result is 0, save copy of divisor to undo subtraction
  427:	  01C9	A8 06			MOV R0,06h
  428:	  01CB			result:
  429:	  01CB	B3			CPL C 	;Invert carry, so it can be directly copied into result
  430:	  01CC	EC			MOV A,R4

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  431:	  01CD	33			RLC A 	;Shift carry flag into temporary result
  432:	  01CE	FC			MOV R4,A
  433:	  01CF	ED			MOV A,R5
  434:	  01D0	33			RLC A
  435:	  01D1	FD			MOV R5,A
  436:	  01D2	D5 F0 DF		DJNZ B,rshift 	;Now count backwards and repeat until "B" is zero
  437:	  01D5	AB 05			MOV R3,05h 	;Move result to R3/R2
  438:	  01D7	AA 04			MOV R2,04h 	;Move result to R3/R2
  439:	  01D9	22			RET
  440:
  441:
  442:	  01DA			SERIALINT:
  443:	  01DA	20 99 4E		JB TI, TRANS; if the interrupt is caused by T1 control is transferred to trans as the old da
				ta has been transferred and new data can be sent to the SBUF
  444:	  01DD	20 A5 46		JB AutoLED, AutoModeON
  445:
  446:	  01E0	E5 99			MOV A, SBUF
  447:	  01E2	C2 98			CLR RI		;Clear receive interrupt flag
  448:	  01E4	FC			MOV R4, A
  449:
  450:				;;;;;;;;Switch;;;;;;;;
  451:	  01E5	C3			CLR C		;Clear carry flag befor using SUBB for comparing
  452:	  01E6	94 66			SUBB A, #'f'	;Compare A to 'f'
  453:	  01E8	60 1E			JZ Jmvfwd	;If A = 'f' MoveForward
  454:
  455:	  01EA	EC			MOV A, R4;
  456:	  01EB	C3			CLR C		;Clear carry flag befor using SUBB for comparing
  457:	  01EC	94 62			SUBB A, #'b'	;Compare A to 'b'
  458:	  01EE	60 1D			JZ Jmvbwd	;If A = 'b' MoveBackward
  459:
  460:	  01F0	EC			MOV A, R4;
  461:	  01F1	C3			CLR C		;Clear carry flag befor using SUBB for comparing
  462:	  01F2	94 72			SUBB A, #'r'	;Compare A to 'r'
  463:	  01F4	60 1C			JZ Jmvright	;If A = 'r' MoveRight
  464:
  465:	  01F6	EC			MOV A, R4;
  466:	  01F7	C3			CLR C		;Clear carry flag befor using SUBB for comparing
  467:	  01F8	94 6C			SUBB A, #'l'	;Compare A to 'l'
  468:	  01FA	60 1B			JZ Jmvleft	;If A = 'l' MoveLeft
  469:
  470:	  01FC	EC			MOV A, R4;
  471:	  01FD	C3			CLR C		;Clear carry flag befor using SUBB for comparing
  472:	  01FE	94 61			SUBB A, #'a'	;Compare A to 'a'
  473:	  0200	60 1F			JZ TurnOnAuto;If A = 'a' then active auto drive
  474:
  475:
  476:	  0202	EC			MOV A, R4;
  477:	  0203	C3			CLR C		;Clear carry flag befor using SUBB for comparing
  478:	  0204	94 73			SUBB A, #'s'	;Compare A to 's'
  479:	  0206	60 14			JZ Jstop	;If A = 's' stop the car
  480:
  481:
  482:					;;;;;;TRY TO OPTIMIZE;;;;;;
  483:	  0208	11 8C			Jmvfwd:	ACALL MoveForward
  484:	  020A	02 02 2B		JMP TRANS
  485:	  020D	11 95			Jmvbwd:ACALL MoveBackward

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



 Line  I  Addr  Code            Source

  486:	  020F	02 02 2B		JMP TRANS
  487:	  0212	11 9E			Jmvright:ACALL MoveRight
  488:	  0214	02 02 2B		JMP TRANS
  489:	  0217	11 A7			Jmvleft:ACALL MoveLeft
  490:	  0219	02 02 2B		JMP TRANS
  491:	  021C	11 B0			Jstop:ACALL StopCar
  492:	  021E	02 02 2B		JMP TRANS
  493:	  0221	D2 A5			TurnOnAuto:SETB AutoLED
  494:	  0223	02 02 2B		JMP TRANS
  495:
  496:
  497:
  498:
  499:
  500:
  501:
  502:
  503:
  504:
  505:
  506:
  507:
  508:	  0226			AutoModeON:
  509:	  0226	C2 A5			CLR AutoLED
  510:	  0228	C2 98		        CLR RI; clears RI flag
  511:	  022A	32		        RETI; transfers control to main
  512:
  513:	  022B	32		TRANS:	RETI;  transfers control to main
  514:
  515:
  516:
  517:
  518:				END
  519:
  520:





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
AUTODRIVEMODE			  CODE	    0074	  88
AUTOLED				  NUMBER    00A5	  17
AUTOMODEON			  CODE	    0226	 508
B				  DATA	      F0
CALCDISTANCE			  CODE	    0119	 258
COMMANDWRT			  CODE	    0175	 347
CY				  BIT	      D7
DATABUS				  NUMBER    0090	  39
DATAWRT				  CODE	    0182	 359
DELAY				  CODE	    0194	 374
DELAY10M			  CODE	    0130	 290
DELAY10MREG			  CODE	    018F	 370
DELAY1M				  CODE	    019D	 382
DELAYHALFSEC			  CODE	    0140	 302
DELAYHLFSECLOOP			  CODE	    0144	 307
DELAYSEC			  CODE	    0158	 320
DELAYSECLOOP			  CODE	    015C	 325
DETECTED			  CODE	    00B9	 153
DETECTEDPIN			  NUMBER    00A6	  19
DIV_16				  CODE	    01A2	 395
DLOOP				  CODE	    00CB	 170
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ECHO				  NUMBER    00A4	  26
ECHOROUTINE			  CODE	    00F8	 205
EN				  BIT	      A2	  38
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
JMVBWD				  CODE	    020D	 485
JMVFWD				  CODE	    0208	 483
JMVLEFT				  CODE	    0217	 489

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 12



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
JMVRIGHT			  CODE	    0212	 487
JSTOP				  CODE	    021C	 491
LCD_F				  BIT	      97	  40
LEFTBACKWARD			  NUMBER    0082	  13
LEFTFORWARD			  NUMBER    0083	  12
LSHIFT				  CODE	    01AA	 400
MAIN				  CODE	    0062	  67
MOVEBACKWARD			  CODE	    0095	 120
MOVEFORWARD			  CODE	    008C	 112
MOVELEFT			  CODE	    00A7	 136
MOVERIGHT			  CODE	    009E	 128
NOOBJ				  CODE	    0118	 253
NORMALDET			  CODE	    00CA	 163
NORMALMODE			  CODE	    005B	  60
ONLED				  NUMBER    00A7	  18
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PRINT				  CODE	    00E8	 193
PRINTDEC			  CODE	    00D6	 181
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RESULT				  CODE	    01CB	 428
RI				  BIT	      98
RIGHTBACKWARD			  NUMBER    0080	  15
RIGHTFORWARD			  NUMBER    0081	  14
RS				  BIT	      A0	  36
RS0				  BIT	      D3
RS1				  BIT	      D4
RSHIFT				  CODE	    01B4	 409
RW				  BIT	      A1	  37
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SENDCHAR			  CODE	    0170	 341
SERIALINT			  CODE	    01DA	 442
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
START				  CODE	    0030	  10
STOPCAR				  CODE	    00B0	 144
T0				  BIT	      B4

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 13



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TRANS				  CODE	    022B	 513
TRIG				  NUMBER    00A3	  25
TRIGAGAIN			  CODE	    0079	  92
TURNONAUTO			  CODE	    0221	 493
TXD				  BIT	      B1
WR				  BIT	      B6
Y				  CODE	    0196	 376
