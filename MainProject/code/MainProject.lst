
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	C:\Microcontroller project\microprocessor\MainProject\code\MainProject.asm
	Object File:	C:\Microcontroller project\microprocessor\MainProject\code\MainProject.hex
	List File:	C:\Microcontroller project\microprocessor\MainProject\code\MainProject.lst



 Line  I  Addr  Code            Source

    1:		N      0000	ORG 0000H; location where execution of the program starts from
    2:	  0000	02 00 30	LJMP START; LJMP used to bypass the ISR
    3:
    4:		N      0023	ORG 0023H; location for ISR for both TI and RI
    5:	  0023	02 01 42	LJMP SERIALINT
    6:
    7:				;R4 store received character
    8:				;R3 for storing value of TH from ultrasonic echo
    9:		N      0030	ORG 30H
   10:	  0030			START:
   11:	  0030	75 80 00	MOV P0, #0
   12:		B      0090	LeftForward EQU P1.0
   13:		B      0091	LeftBackward EQU P1.1
   14:		B      0092	RightForward EQU P1.2
   15:		B      0093	RightBackward EQU P1.3
   16:	  0033	C2 94		CLR P1.4
   17:
   18:		B      0097	AutoLED EQU P1.7	;LED indicate if Auto mode is on or not
   19:		B      0096	OnLED EQU P1.6
   20:		B      0095	DetectedPin EQU P1.5
   21:	  0035	C2 95		CLR DetectedPin
   22:	  0037	D2 96		SETB OnLED
   23:
   24:		B      00A0	TRIG EQU P2.0
   25:		B      00A1	ECHO EQU P2.1
   26:
   27:	  0039	C2 A0		CLR TRIG		; sets P2.0(TRIG) as output for sending trigger
   28:	  003B	D2 A1		SETB ECHO		; sets P2.1(ECHO) as input for receiving echo
   29:
   30:	  003D	C2 90		CLR LeftForward		; sets P1.0(LeftForward) as output
   31:	  003F	C2 91		CLR LeftBackward	; sets P1.1(LeftBackward) as output
   32:	  0041	C2 92		CLR RightForward	; sets P1.2(RightForward) as output
   33:	  0043	C2 93		CLR RightBackward	; sets P1.3(RightBackward) as output
   34:
   35:				;Setup serial port and timer 1 for bluetooth
   36:	  0045	75 89 21	MOV TMOD, #00100001B	;Mode 2 for timer 1 (8 bit auto reload)
   37:	  0048	75 8D FD	MOV TH1, #0FDH		;setting baud rate 9600
   38:	  004B	75 98 50	MOV SCON, #01010000B	;Serial Mode 1, REN Enabled
   39:	  004E	D2 8E		SETB TR1		;Run timer 1
   40:	  0050	75 A8 80	MOV IE, #10000000B	;enables interrupt
   41:
   42:	  0053			NormalMode:
   43:					;The following to instruction to reset when returning from AutoDriveMode

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:	  0053	C2 97			CLR AutoLED
   45:	  0055	11 E4			ACALL StopCar
   46:
   47:	  0057	30 98 FD	Main:	JNB RI, $	;Waiting for receive interrupt flag
   48:	  005A	E5 99			MOV A, SBUF	;Move received character to A
   49:	  005C	C2 98			CLR RI		;Clear receive interrupt flag
   50:	  005E	FC			MOV R4, A
   51:
   52:				;;;;;;;;Switch;;;;;;;;
   53:	  005F	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   54:	  0060	94 66			SUBB A, #'f'	;Compare A to 'f'
   55:	  0062	60 1E			JZ Jmvfwd	;If A = 'f' MoveForward
   56:
   57:	  0064	EC			MOV A, R4;
   58:	  0065	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   59:	  0066	94 62			SUBB A, #'b'	;Compare A to 'b'
   60:	  0068	60 1D			JZ Jmvbwd	;If A = 'b' MoveBackward
   61:
   62:	  006A	EC			MOV A, R4;
   63:	  006B	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   64:	  006C	94 72			SUBB A, #'r'	;Compare A to 'r'
   65:	  006E	60 1C			JZ Jmvright	;If A = 'r' MoveRight
   66:
   67:	  0070	EC			MOV A, R4;
   68:	  0071	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   69:	  0072	94 6C			SUBB A, #'l'	;Compare A to 'l'
   70:	  0074	60 1B			JZ Jmvleft	;If A = 'l' MoveLeft
   71:
   72:	  0076	EC			MOV A, R4;
   73:	  0077	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   74:	  0078	94 61			SUBB A, #'a'	;Compare A to 'a'
   75:	  007A	60 21			JZ AutoDriveMode;If A = 'a' then active auto drive
   76:
   77:	  007C	EC			MOV A, R4;
   78:	  007D	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   79:	  007E	94 73			SUBB A, #'s'	;Compare A to 's'
   80:	  0080	60 14			JZ Jstop	;If A = 's' stop the car
   81:
   82:
   83:				;;;;;;TRY TO OPTIMIZE;;;;;;
   84:	  0082	11 C0		Jmvfwd:	ACALL MoveForward
   85:	  0084	02 00 9B	JMP BckMain
   86:	  0087	11 C9		Jmvbwd:ACALL MoveBackward
   87:	  0089	02 00 9B	JMP BckMain
   88:	  008C	11 D2		Jmvright:ACALL MoveRight
   89:	  008E	02 00 9B	JMP BckMain
   90:	  0091	11 DB		Jmvleft:ACALL MoveLeft
   91:	  0093	02 00 9B	JMP BckMain
   92:	  0096	11 E4		Jstop:ACALL StopCar
   93:	  0098	02 00 9B	JMP BckMain
   94:
   95:	  009B	80 BA		BckMain:SJMP Main	;Jump back to Main for looping
   96:				;;;;;;TRY TO OPTIMIZE;;;;;;
   97:
   98:
   99:				;AutoDriveMode is mode for auto move and detect objects

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100:	  009D			AutoDriveMode:
  101:	  009D	75 A8 90		MOV IE, #10010000B	;enables serial interrupt which can be caused by both TI/RI
  102:	  00A0	D2 97			SETB AutoLED		;Turn on auto drive LED
  103:
  104:	  00A2			TrigAgain:
  105:	  00A2	C3			CLR C
  106:	  00A3	30 97 AD		JNB AutoLED, NormalMode	;IF autoLed pin is 0 JMP to NormalMode
  107:
  108:					;TODO remove or solve it
  109:	  00A6	C2 95			CLR DetectedPin
  110:
  111:	  00A8	D2 A0			SETB TRIG		; starts the trigger pulse
  112:	  00AA	31 1A			ACALL Delay10M     	; Delay 10uS width for the trigger pulse
  113:	  00AC	C2 A0			CLR TRIG         	; ends the trigger pulse
  114:
  115:	  00AE	30 A1 FD		JNB ECHO,$    		; loops here until echo is received
  116:
  117:	  00B1	11 FC			ACALL CalcDistance
  118:					;TODO when transistor be used
  119:	  00B3	20 8D 06		JB TF0, NoObj
  120:	  00B6	11 ED			ACALL Detected
  121:	  00B8	C2 8D			CLR TF0
  122:	  00BA	80 E6			SJMP TrigAgain
  123:
  124:	  00BC	11 C0		NoObj:	ACALL MoveForward
  125:	  00BE	80 E2			SJMP TrigAgain		;short jumps to again loop
  126:
  127:	  00C0			MoveForward:
  128:	  00C0	C2 93			CLR RightBackward
  129:	  00C2	C2 91			CLR LeftBackward
  130:	  00C4	D2 92			SETB RightForward
  131:	  00C6	D2 90			SETB LeftForward
  132:					;ACALL FeedBck
  133:	  00C8	22			RET
  134:
  135:	  00C9			MoveBackward:
  136:	  00C9	C2 92			CLR RightForward
  137:	  00CB	C2 90			CLR LeftForward
  138:	  00CD	D2 93			SETB RightBackward
  139:	  00CF	D2 91			SETB LeftBackward
  140:					;ACALL FeedBck
  141:	  00D1	22			RET
  142:
  143:	  00D2			MoveRight:
  144:	  00D2	C2 93			CLR RightBackward
  145:	  00D4	C2 91			CLR LeftBackward
  146:	  00D6	C2 92			CLR RightForward
  147:	  00D8	D2 90			SETB LeftForward
  148:					;ACALL FeedBck
  149:	  00DA	22			RET
  150:
  151:	  00DB			MoveLeft:
  152:	  00DB	C2 92			CLR RightForward
  153:	  00DD	C2 90			CLR LeftForward
  154:	  00DF	D2 93			SETB RightBackward
  155:	  00E1	C2 91			CLR LeftBackward

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  156:					;ACALL FeedBck
  157:	  00E3	22			RET
  158:
  159:	  00E4			StopCar:
  160:	  00E4	C2 93			CLR RightBackward
  161:	  00E6	C2 91			CLR LeftBackward
  162:	  00E8	C2 92			CLR RightForward
  163:	  00EA	C2 90			CLR LeftForward
  164:					;ACALL FeedBck
  165:	  00EC	22			RET
  166:
  167:				;If object detected MoveBack for 1 sec then move right for 2 sec
  168:	  00ED			Detected:
  169:	  00ED	D2 95			SETB DetectedPin
  170:	  00EF	11 C9			ACALL MoveBackward
  171:	  00F1	31 2A			ACALL DelaySec
  172:	  00F3	11 D2			ACALL MOVERight
  173:	  00F5	31 2A			ACALL DelaySec
  174:	  00F7	31 2A			ACALL DelaySec
  175:	  00F9	C2 95			CLR DetectedPin
  176:	  00FB	22			RET
  177:
  178:
  179:	  00FC			CalcDistance:
  180:					;Loop until ECHO pin is low
  181:					;Start counting ticks from 44103D => AC47
  182:					;44103D for maximum distance
  183:	  00FC	75 8A 47		MOV TL0, #47H
  184:	  00FF	75 8C AC		MOV TH0, #0ACH
  185:
  186:	  0102	C2 8D			CLR TF0
  187:	  0104	D2 8C			SETB TR0	;start timer 0
  188:
  189:					;TODO LOOP while ECHO 1 and TF0 is 0
  190:	  0106	20 A1 FD		JB ECHO, $	;If ECHO is high loop to echo is 1
  191:
  192:					;TODO
  193:	  0109	20 A1 03		CheckECHO:JB ECHO, CheckOF
  194:	  010C	02 01 14			JMP d
  195:	  010F	30 8D F7		CheckOF: JNB TF0, CheckECHO
  196:						;IF else
  197:	  0112	31 17				ACALL RestartUS
  198:	  0114	C2 8C			d:CLR TR0
  199:
  200:	  0116	22		RET
  201:
  202:				;TODO
  203:				;restart ultrasonic sensor
  204:	  0117			RestartUS:
  205:	  0117	C2 8C		CLR TR0
  206:	  0119	22		RET
  207:
  208:
  209:				;Delay 10 micro sec
  210:	  011A			Delay10M:
  211:					;MOV TMOD, #00000001B ;set timer0 as mode 1 16-bit

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  212:	  011A	75 8A F7		MOV TL0, #0F7H
  213:	  011D	75 8C FF		MOV TH0, #0FFH
  214:
  215:	  0120	D2 8C			SETB TR0
  216:
  217:	  0122	30 8D FD		JNB TF0, $
  218:	  0125	C2 8C			CLR TR0
  219:	  0127	C2 8D			CLR TF0
  220:	  0129	22		RET
  221:
  222:	  012A			DelaySec:
  223:	  012A	C0 07			PUSH 07H
  224:	  012C	7F 14		    	MOV R7, #20D
  225:				    	;Timer Clk = 11.0592/12*1 = 0.9216 MHz
  226:					;50000 uS / (1 / 0.9216)uS = 46080 [65536 - 46080 = 19456 => 4C00H]
  227:	  012E				DelaySecLoop:
  228:	  012E	75 8A 00	    		MOV TL0, #00H
  229:	  0131	75 8C 4C	    		MOV TH0, #4CH
  230:	  0134	D2 8C		    		SETB TR0	;Start timer 0
  231:
  232:	  0136	30 8D FD	    		JNB TF0, $	;Loop until Timer 0 overflow = 1
  233:	  0139	C2 8C		    		CLR TR0		;Stop timer 0
  234:	  013B	C2 8D		    		CLR TF0		;Clear overFlow
  235:
  236:	  013D	DF EF		    		DJNZ R7, DelaySecLoop ;Decrement A then if A != 0 jump to DelaySecLoop
  237:
  238:	  013F	D0 07		    	POP 07H
  239:	  0141	22		RET
  240:
  241:
  242:	  0142			SERIALINT:
  243:	  0142	20 99 05		JB TI, TRANS; if the interrupt is caused by T1 control is transferred to trans as the old da
				ta has been transferred and new data can be sent to the SBUF
  244:	  0145	C2 97			CLR AutoLED
  245:	  0147	C2 98		        CLR RI; clears RI flag
  246:	  0149	32		        RETI; transfers control to main
  247:
  248:	  014A	32		TRANS:	RETI;  transfers control to main
  249:
  250:				END
  251:
  252:





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
AUTODRIVEMODE			  CODE	    009D	 100
AUTOLED				  NUMBER    0097	  18
B				  DATA	      F0
BCKMAIN				  CODE	    009B	  95
CALCDISTANCE			  CODE	    00FC	 179
CHECKECHO			  CODE	    0109	 193
CHECKOF				  CODE	    010F	 195
CY				  BIT	      D7
D				  CODE	    0114	 198
DELAY10M			  CODE	    011A	 210
DELAYSEC			  CODE	    012A	 222
DELAYSECLOOP			  CODE	    012E	 227
DETECTED			  CODE	    00ED	 168
DETECTEDPIN			  NUMBER    0095	  20
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ECHO				  NUMBER    00A1	  25
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
JMVBWD				  CODE	    0087	  86
JMVFWD				  CODE	    0082	  84
JMVLEFT				  CODE	    0091	  90
JMVRIGHT			  CODE	    008C	  88
JSTOP				  CODE	    0096	  92
LEFTBACKWARD			  NUMBER    0091	  13
LEFTFORWARD			  NUMBER    0090	  12
MAIN				  CODE	    0057	  47
MOVEBACKWARD			  CODE	    00C9	 135
MOVEFORWARD			  CODE	    00C0	 127
MOVELEFT			  CODE	    00DB	 151
MOVERIGHT			  CODE	    00D2	 143

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
NOOBJ				  CODE	    00BC	 124
NORMALMODE			  CODE	    0053	  42
ONLED				  NUMBER    0096	  19
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RESTARTUS			  CODE	    0117	 204
RI				  BIT	      98
RIGHTBACKWARD			  NUMBER    0093	  15
RIGHTFORWARD			  NUMBER    0092	  14
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SERIALINT			  CODE	    0142	 242
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
START				  CODE	    0030	  10
STOPCAR				  CODE	    00E4	 159
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TRANS				  CODE	    014A	 248
TRIG				  NUMBER    00A0	  24
TRIGAGAIN			  CODE	    00A2	 104

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TXD				  BIT	      B1
WR				  BIT	      B6
