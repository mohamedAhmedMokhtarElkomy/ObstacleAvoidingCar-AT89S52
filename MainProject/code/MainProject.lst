
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	C:\Microcontroller project\microprocessor\MainProject\code\MainProject.asm
	Object File:	C:\Microcontroller project\microprocessor\MainProject\code\MainProject.hex
	List File:	C:\Microcontroller project\microprocessor\MainProject\code\MainProject.lst



 Line  I  Addr  Code            Source

    1:		N      0000	ORG 0000H; location where execution of the program starts from
    2:	  0000	02 00 30	LJMP START; LJMP used to bypass the ISR
    3:
    4:		N      0023	ORG 0023H; location for ISR for both TI and RI
    5:	  0023	02 01 E7	LJMP SERIALINT
    6:
    7:				;R4 store received character
    8:				;R3 for storing value of TH from ultrasonic echo
    9:		N      0030	ORG 30H
   10:	  0030			START:
   11:
   12:		B      0083	LeftForward EQU P0.3
   13:		B      0082	LeftBackward EQU P0.2
   14:		B      0081	RightForward EQU P0.1
   15:		B      0080	RightBackward EQU P0.0
   16:
   17:		B      00A5	AutoLED EQU P2.5	;LED indicate if Auto mode is on or not
   18:		B      00A7	OnLED EQU P2.7
   19:		B      00A6	DetectedPin EQU P2.6	;LED indicate if object detected or not
   20:
   21:	  0030	C2 A6		CLR DetectedPin
   22:	  0032	C2 A7		CLR OnLED
   23:
   24:		B      00A3	TRIG EQU P2.3
   25:		B      00A4	ECHO EQU P2.4
   26:
   27:	  0034	C2 A3		CLR TRIG		; sets P2.0(TRIG) as output for sending trigger
   28:	  0036	D2 A4		SETB ECHO		; sets P2.1(ECHO) as input for receiving echo
   29:
   30:	  0038	C2 83		CLR LeftForward		; sets P1.0(LeftForward) as output
   31:	  003A	C2 82		CLR LeftBackward	; sets P1.1(LeftBackward) as output
   32:	  003C	C2 81		CLR RightForward	; sets P1.2(RightForward) as output
   33:	  003E	C2 80		CLR RightBackward	; sets P1.3(RightBackward) as output
   34:
   35:		B	 A0	RS BIT P2.0
   36:		B	 A1	RW BIT P2.1
   37:		B	 A2	EN  BIT P2.2
   38:		D      0090	DATABUS EQU P1
   39:		B	 97	LCD_F BIT P1.7
   40:
   41:				;LCD INITIALIZATION
   42:	  0040	74 38		MOV A, #38H	; INITIATE LCD
   43:	  0042	31 82		ACALL COMMANDWRT

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:
   45:	  0044	74 0F		MOV A, #0FH	; DISPLAY ON CURSOR ON
   46:	  0046	31 82		ACALL COMMANDWRT
   47:
   48:	  0048	74 01		MOV A, #01H	; CLEAR LCD
   49:	  004A	31 82		ACALL COMMANDWRT
   50:
   51:				;Setup serial port and timer 1 for bluetooth
   52:	  004C	75 89 21	MOV TMOD, #00100001B	;Mode 2 for timer 1 (8 bit auto reload)
   53:	  004F	75 8D FD	MOV TH1, #0FDH		;setting baud rate 9600
   54:	  0052	75 98 50	MOV SCON, #01010000B	;Serial Mode 1, REN Enabled
   55:	  0055	D2 8E		SETB TR1		;Run timer 1
   56:
   57:	  0057	D2 A7		SETB OnLED		;Turn on LED that indicates that power is ON
   58:
   59:	  0059			NormalMode:
   60:					;The following instructions to reset when returning from AutoDriveMode
   61:	  0059	C2 A5			CLR AutoLED
   62:	  005B	11 E2			ACALL StopCar
   63:	  005D	75 A8 80		MOV IE, #10000000B	;enables interrupt and Stop serial interrupt from auto mode
   64:
   65:				;TODO Make Normal mode work on serial interrupts for let ultrasonic works
   66:	  0060	30 98 FD	Main:	JNB RI, $	;Waiting for receive interrupt flag
   67:	  0063	E5 99			MOV A, SBUF	;Move received character to A
   68:	  0065	C2 98			CLR RI		;Clear receive interrupt flag
   69:	  0067	FC			MOV R4, A
   70:
   71:				;;;;;;;;Switch;;;;;;;;
   72:	  0068	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   73:	  0069	94 66			SUBB A, #'f'	;Compare A to 'f'
   74:	  006B	60 1E			JZ Jmvfwd	;If A = 'f' MoveForward
   75:
   76:	  006D	EC			MOV A, R4;
   77:	  006E	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   78:	  006F	94 62			SUBB A, #'b'	;Compare A to 'b'
   79:	  0071	60 1D			JZ Jmvbwd	;If A = 'b' MoveBackward
   80:
   81:	  0073	EC			MOV A, R4;
   82:	  0074	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   83:	  0075	94 72			SUBB A, #'r'	;Compare A to 'r'
   84:	  0077	60 1C			JZ Jmvright	;If A = 'r' MoveRight
   85:
   86:	  0079	EC			MOV A, R4;
   87:	  007A	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   88:	  007B	94 6C			SUBB A, #'l'	;Compare A to 'l'
   89:	  007D	60 1B			JZ Jmvleft	;If A = 'l' MoveLeft
   90:
   91:	  007F	EC			MOV A, R4;
   92:	  0080	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   93:	  0081	94 61			SUBB A, #'a'	;Compare A to 'a'
   94:	  0083	60 21			JZ AutoDriveMode;If A = 'a' then active auto drive
   95:
   96:	  0085	EC			MOV A, R4;
   97:	  0086	C3			CLR C		;Clear carry flag befor using SUBB for comparing
   98:	  0087	94 73			SUBB A, #'s'	;Compare A to 's'
   99:	  0089	60 14			JZ Jstop	;If A = 's' stop the car

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100:
  101:
  102:				;;;;;;TRY TO OPTIMIZE;;;;;;
  103:	  008B	11 BE		Jmvfwd:	ACALL MoveForward
  104:	  008D	02 00 A4	JMP BckMain
  105:	  0090	11 C7		Jmvbwd:ACALL MoveBackward
  106:	  0092	02 00 A4	JMP BckMain
  107:	  0095	11 D0		Jmvright:ACALL MoveRight
  108:	  0097	02 00 A4	JMP BckMain
  109:	  009A	11 D9		Jmvleft:ACALL MoveLeft
  110:	  009C	02 00 A4	JMP BckMain
  111:	  009F	11 E2		Jstop:ACALL StopCar
  112:	  00A1	02 00 A4	JMP BckMain
  113:
  114:				;TODO turning ultrasonic on in normal mode
  115:	  00A4			BckMain:;SETB TRIG		; starts the trigger pulse
  116:				;	ACALL Delay10M     	; Delay 10uS width for the trigger pulse
  117:				;	CLR TRIG         	; ends the trigger pulse
  118:
  119:				;	JNB ECHO,$    		; loops here until echo is received
  120:
  121:					;ACALL CalcDistance
  122:	  00A4	80 BA			SJMP Main	;Jump back to Main for looping
  123:				;;;;;;TRY TO OPTIMIZE;;;;;;
  124:
  125:
  126:				;AutoDriveMode is mode for auto move and detect objects
  127:	  00A6			AutoDriveMode:
  128:	  00A6	75 A8 90		MOV IE, #10010000B	;enables serial interrupt which can be caused by both TI/RI
  129:	  00A9	D2 A5			SETB AutoLED		;Turn on auto drive LED
  130:
  131:	  00AB			TrigAgain:
  132:	  00AB	C3			CLR C
  133:	  00AC	30 A5 AA		JNB AutoLED, NormalMode	;IF autoLed pin is 0 JMP to NormalMode
  134:
  135:					;TODO remove or solve it
  136:				;	CLR DetectedPin
  137:
  138:	  00AF	D2 A3			SETB TRIG		; starts the trigger pulse
  139:	  00B1	31 55			ACALL Delay10M     	; Delay 10uS width for the trigger pulse
  140:	  00B3	C2 A3			CLR TRIG         	; ends the trigger pulse
  141:
  142:	  00B5	30 A4 FD		JNB ECHO,$    		; loops here until echo is received
  143:
  144:	  00B8	31 1F			ACALL ECHOroutine
  145:					;TODO when transistor be used
  146:					;JB TF0, NoObj
  147:					;ACALL Detected
  148:
  149:				;	SJMP TrigAgain
  150:
  151:	  00BA	11 BE			ACALL MoveForward	;Default for automode to move forward
  152:	  00BC	80 ED			SJMP TrigAgain		;short jumps to again loop
  153:
  154:	  00BE			MoveForward:
  155:	  00BE	C2 80			CLR RightBackward

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  156:	  00C0	C2 82			CLR LeftBackward
  157:	  00C2	D2 81			SETB RightForward
  158:	  00C4	D2 83			SETB LeftForward
  159:					;ACALL FeedBck
  160:	  00C6	22			RET
  161:
  162:	  00C7			MoveBackward:
  163:	  00C7	C2 81			CLR RightForward
  164:	  00C9	C2 83			CLR LeftForward
  165:	  00CB	D2 80			SETB RightBackward
  166:	  00CD	D2 82			SETB LeftBackward
  167:					;ACALL FeedBck
  168:	  00CF	22			RET
  169:
  170:	  00D0			MoveRight:
  171:	  00D0	C2 80			CLR RightBackward
  172:	  00D2	C2 82			CLR LeftBackward
  173:	  00D4	C2 81			CLR RightForward
  174:	  00D6	D2 83			SETB LeftForward
  175:					;ACALL FeedBck
  176:	  00D8	22			RET
  177:
  178:	  00D9			MoveLeft:
  179:	  00D9	D2 81			SETB RightForward
  180:	  00DB	C2 83			CLR LeftForward
  181:	  00DD	C2 80			CLR RightBackward
  182:	  00DF	C2 82			CLR LeftBackward
  183:					;ACALL FeedBck
  184:	  00E1	22			RET
  185:
  186:	  00E2			StopCar:
  187:	  00E2	C2 80			CLR RightBackward
  188:	  00E4	C2 82			CLR LeftBackward
  189:	  00E6	C2 81			CLR RightForward
  190:	  00E8	C2 83			CLR LeftForward
  191:					;ACALL FeedBck
  192:	  00EA	22			RET
  193:
  194:				;If object detected MoveBack for 1 sec then move right for 2 sec
  195:	  00EB			Detected:
  196:				;	JNB AutoLED, Normal	;If in normal form just give warning
  197:	  00EB	D2 A6			SETB DetectedPin
  198:	  00ED	11 C7			ACALL MoveBackward
  199:	  00EF	31 65			ACALL DelaySec
  200:	  00F1	11 D0			ACALL MOVERight
  201:	  00F3	31 65			ACALL DelaySec
  202:	  00F5	31 65			ACALL DelaySec
  203:	  00F7	C2 A6			CLR DetectedPin
  204:	  00F9	22			RET
  205:
  206:				;R6 is the input for sub routine
  207:				;R7 is used as counter
  208:				;R5 as temp register for data poped from stack
  209:				;Display LOOP for printing input on LCD Screen
  210:	  00FA	C0 06		DLOOP:	PUSH 06H
  211:	  00FC	C0 07			PUSH 07H

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  212:
  213:					; CLEAR LCD
  214:	  00FE	74 01			MOV A, #01H
  215:	  0100	31 82			ACALL COMMANDWRT
  216:
  217:	  0102	EE			MOV A, R6
  218:	  0103	7F 00			MOV R7, #0D	;Counter to store count of numbers
  219:
  220:				;PrintDEC, print => for converting hex value to decimal then print each number
  221:	  0105				PrintDEC:
  222:	  0105	0F				INC R7
  223:	  0106	75 F0 0A			MOV B, #10D
  224:	  0109	84				DIV AB			;the quotient is stored in the accumulator and the remainder
				 is stored in the B register
  225:	  010A	C0 F0				PUSH B
  226:	  010C	B4 00 F6			CJNE A, #0D, PrintDEC	;Compare the first two operands and branches to the specifie
				d destination if their values are not equal
  227:
  228:	  010F	D0 05			print:	POP 05H			;POP to 05H which is R5
  229:	  0111	ED				MOV A, R5
  230:	  0112	24 30				ADD A, #'0'		;Add 0 hex value to print number from 0 to 9
  231:	  0114	F9				MOV R1, A;TODO REMOVE
  232:	  0115	12 01 7D			CALL SENDCHAR		;PRINTING A CHARACTER
  233:						;ACALL DelaySec		;TODO i think it is not useful
  234:	  0118	DF F5				DJNZ R7, print		;decrements the byte indicated by the first operand and, if
				the resulting value is not zero, branches to the address specified in the second operand.
  235:
  236:	  011A	D0 07			POP 07H
  237:	  011C	D0 06			POP 06H
  238:	  011E	22		RET
  239:
  240:	  011F			ECHOroutine:
  241:					;Loop until ECHO pin is low
  242:					;Start counting ticks from 44103D => AC47
  243:					;44103D for maximum distance from 44103D to 65536 equal 4 meters
  244:					;
  245:	  011F	75 8A 47		MOV TL0, #47H
  246:	  0122	75 8C AC		MOV TH0, #0ACH
  247:
  248:	  0125	C2 8D			CLR TF0
  249:
  250:	  0127	D2 8C			SETB TR0	;start timer 0
  251:
  252:					;TODO LOOP while ECHO 1 and TF0 is 0
  253:	  0129	20 A4 FD		JB ECHO, $	;While ECHO is while stay here
  254:	  012C	C2 8C			CLR TR0
  255:	  012E	C2 8D			CLR TF0
  256:
  257:					;Calculate and print distance
  258:	  0130	31 3E			ACALL CalcDistance
  259:
  260:					;Check if distance is less that 1 meter or not
  261:					;C135H => over 98cm, C235H => over 101cm
  262:	  0132	74 C2			MOV A, #0C2H	;
  263:	  0134	C3			CLR C
  264:	  0135	95 8C			SUBB A, TH0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  265:	  0137	54 80			ANL A, #10000000B	;Check first bit if 1 (-ve) Distance greater than 1 meter if 0 (+ve)
				 Distance less than 1 meter
  266:	  0139	70 02			JNZ NoObj		;If 0 then no object in distance less than 1 meter
  267:
  268:					;TODO not useful
  269:					;MOV A, #35H
  270:					;CLR C
  271:					;SUBB A, TL0
  272:					;ANL A, #10000000B
  273:					;JNZ NoObj
  274:
  275:					;If else first bit is 1 then object detected in distance less than 1 meter
  276:	  013B	11 EB			ACALL Detected
  277:
  278:
  279:					;TODO if transistor is needed
  280:					;CheckECHO:JB ECHO, CheckOF
  281:					;	JMP d
  282:					;CheckOF: JNB TF0, CheckECHO
  283:							;IF else
  284:						;ACALL RestartUS
  285:
  286:	  013D	22		NoObj:RET
  287:
  288:				;CalcDistance calculate distance in cm from number of tick by divide ticks / 58D
  289:				;Then print the distance
  290:				;R3, R2 = R1 R0 / R3 R2
  291:	  013E			CalcDistance:
  292:					;Prepare R1 for div_16
  293:	  013E	C3			CLR C
  294:	  013F	E5 8C			MOV A, TH0
  295:	  0141	94 AC			SUBB A, #0ACH	;Subtract ACH from TH0 which was the starting ticks
  296:	  0143	F9			MOV R1, A	;R1 used for div_16
  297:
  298:					;Prepare R0 for div_16
  299:	  0144	C3			CLR C
  300:	  0145	E5 8A			MOV A, TL0
  301:	  0147	94 47			SUBB A, #47H
  302:	  0149	F8			MOV R0, A
  303:
  304:					;Prepare R3 & R2 for div_16
  305:	  014A	7B 00			MOV R3, #0
  306:	  014C	7A 3A			MOV R2, #58D
  307:
  308:	  014E	31 AF			ACALL DIV_16	;R3, R2 = R1 R0 / R3 R2
  309:	  0150	EA			MOV A, R2	;Store returned value in
  310:	  0151	FE			MOV R6, A	;Move a to R6 that is used in Printing
  311:
  312:					;Print distance in decimal
  313:	  0152	11 FA			ACALL DLOOP
  314:	  0154	22		RET
  315:
  316:				;TODO if transistor is required
  317:				;restart ultrasonic sensor
  318:				;RestartUS:
  319:				;CLR TR0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  320:				;RET
  321:
  322:				;Delay 10 micro sec
  323:	  0155			Delay10M:
  324:					;MOV TMOD, #00000001B ;set timer0 as mode 1 16-bit
  325:	  0155	75 8A F7		MOV TL0, #0F7H
  326:	  0158	75 8C FF		MOV TH0, #0FFH
  327:
  328:	  015B	D2 8C			SETB TR0
  329:
  330:	  015D	30 8D FD		JNB TF0, $
  331:	  0160	C2 8C			CLR TR0
  332:	  0162	C2 8D			CLR TF0
  333:	  0164	22		RET
  334:
  335:	  0165			DelaySec:
  336:	  0165	C0 07			PUSH 07H
  337:	  0167	7F 14		    	MOV R7, #20D
  338:				    	;Timer Clk = 11.0592/12*1 = 0.9216 MHz
  339:					;50000 uS / (1 / 0.9216)uS = 46080 [65536 - 46080 = 19456 => 4C00H]
  340:	  0169				DelaySecLoop:
  341:	  0169	75 8A 00	    		MOV TL0, #00H
  342:	  016C	75 8C 4C	    		MOV TH0, #4CH
  343:	  016F	D2 8C		    		SETB TR0	;Start timer 0
  344:
  345:	  0171	30 8D FD	    		JNB TF0, $	;Loop until Timer 0 overflow = 1
  346:	  0174	C2 8C		    		CLR TR0		;Stop timer 0
  347:	  0176	C2 8D		    		CLR TF0		;Clear overFlow
  348:
  349:	  0178	DF EF		    		DJNZ R7, DelaySecLoop ;Decrement A then if A != 0 jump to DelaySecLoop
  350:
  351:	  017A	D0 07		    	POP 07H
  352:	  017C	22		RET
  353:
  354:
  355:				;SENDING A CHARACHTER SUBROUTINE
  356:	  017D			SENDCHAR:
  357:	  017D	31 8F			ACALL DATAWRT
  358:	  017F	31 A1			ACALL DELAY
  359:	  0181	22			RET
  360:
  361:				;COMMAND SUB-ROUTINE FOR LCD CONTROL
  362:	  0182			COMMANDWRT:
  363:
  364:	  0182	F5 90		    	MOV P1, A ;SEND DATA TO P1
  365:	  0184	C2 A0			CLR RS	;RS=0 FOR COMMAND
  366:	  0186	C2 A1			CLR RW	;R/W=0 FOR WRITE
  367:	  0188	D2 A2			SETB EN	;E=1 FOR HIGH PULSE
  368:	  018A	31 A1			ACALL DELAY
  369:	  018C	C2 A2			CLR EN	;E=0 FOR H-L PULSE
  370:
  371:	  018E	22			RET
  372:
  373:				;SUBROUTINE FOR DATA LACTCHING TO LCD
  374:	  018F			DATAWRT:
  375:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  376:	  018F	F5 90			MOV DATABUS, A
  377:	  0191	D2 A0		    	SETB RS	;RS=1 FOR DATA
  378:	  0193	C2 A1		    	CLR RW
  379:	  0195	D2 A2		    	SETB EN
  380:	  0197	31 A1		    	ACALL DELAY
  381:	  0199	C2 A2			CLR EN
  382:
  383:	  019B	22			RET
  384:
  385:	  019C			DELAY10Mreg:
  386:	  019C	7E 02			MOV R6,#2D	;10uS delay
  387:	  019E	DE FE			DJNZ R6, $
  388:	  01A0	22		        RET
  389:	  01A1			DELAY:
  390:	  01A1	78 0A		    	MOV R0, #10	;DELAY. HIGHER VALUE FOR FASTER CPUS
  391:	  01A3	79 FF		Y:	MOV R1, #255
  392:	  01A5	D9 FE			DJNZ R1, $
  393:	  01A7	D8 FA			DJNZ R0, Y
  394:
  395:	  01A9	22			RET
  396:
  397:	  01AA			DELAY1m:
  398:	  01AA	7F FA			MOV R7,#250D	;1mS delay
  399:	  01AC	DF FE			DJNZ R7, $
  400:	  01AE	22		        RET
  401:
  402:				;16bit division
  403:				; R1 R0
  404:				; / R3 R2
  405:				; = R3 R2
  406:				; shift left the divisor such that the number of digits
  407:				; in the divisor is the same as the number of digits in the dividend
  408:				; shift right the divisor and substract this shifted divisor from the dividend
  409:				; repeat the process again until the divisor has shifted into its original position
  410:	  01AF			DIV_16:
  411:	  01AF	C3			CLR C 	;Clear carry initially
  412:	  01B0	7C 00			MOV R4,#00h	;Clear R4 working variable initially
  413:	  01B2	7D 00			MOV R5,#00h	;CLear R5 working variable initially
  414:	  01B4	75 F0 00		MOV B,#00h 	;Clear B since B will count the number of left-shifted bits
  415:	  01B7			lshift:
  416:	  01B7	05 F0			INC B 	;Increment counter for each left shift
  417:	  01B9	EA			MOV A,R2 	;Move the current divisor low byte into the accumulator
  418:	  01BA	33			RLC A 	;Shift low-byte left, rotate through carry to apply highest bit to high-byte
  419:	  01BB	FA			MOV R2,A 	;Save the updated divisor low-byte
  420:	  01BC	EB			MOV A,R3 	;Move the current divisor high byte into the accumulator
  421:	  01BD	33			RLC A 	;Shift high-byte left high, rotating in carry from low-byte
  422:	  01BE	FB			MOV R3,A 	;Save the updated divisor high-byte
  423:	  01BF	50 F6			JNC lshift 	;Repeat until carry flag is set from high-byte
  424:	  01C1			rshift: 		;Shift right the divisor
  425:	  01C1	EB			MOV A,R3 	;Move high-byte of divisor into accumulator
  426:	  01C2	13			RRC A 	;Rotate high-byte of divisor right and into carry
  427:	  01C3	FB			MOV R3,A 	;Save updated value of high-byte of divisor
  428:	  01C4	EA			MOV A,R2 	;Move low-byte of divisor into accumulator
  429:	  01C5	13			RRC A 	;Rotate low-byte of divisor right, with carry from high-byte
  430:	  01C6	FA			MOV R2,A 	;Save updated value of low-byte of divisor
  431:	  01C7	C3			CLR C 	;Clear carry, we don't need it anymore

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  432:	  01C8	89 07			MOV 07h,R1 	;Make a safe copy of the dividend high-byte
  433:	  01CA	88 06			MOV 06h,R0 	;Make a safe copy of the dividend low-byte
  434:	  01CC	E8			MOV A,R0 	;Move low-byte of dividend into accumulator
  435:	  01CD	9A			SUBB A,R2 	;Dividend - shifted divisor = result bit (no factor, only 0 or 1)
  436:	  01CE	F8			MOV R0,A 	;Save updated dividend
  437:	  01CF	E9			MOV A,R1 	;Move high-byte of dividend into accumulator
  438:	  01D0	9B			SUBB A,R3 	;Subtract high-byte of divisor (all together 16-bit substraction)
  439:	  01D1	F9			MOV R1,A 	;Save updated high-byte back in high-byte of divisor
  440:	  01D2	50 04			JNC result 	;If carry flag is NOT set, result is 1
  441:	  01D4	A9 07			MOV R1,07h 	;Otherwise result is 0, save copy of divisor to undo subtraction
  442:	  01D6	A8 06			MOV R0,06h
  443:	  01D8			result:
  444:	  01D8	B3			CPL C 	;Invert carry, so it can be directly copied into result
  445:	  01D9	EC			MOV A,R4
  446:	  01DA	33			RLC A 	;Shift carry flag into temporary result
  447:	  01DB	FC			MOV R4,A
  448:	  01DC	ED			MOV A,R5
  449:	  01DD	33			RLC A
  450:	  01DE	FD			MOV R5,A
  451:	  01DF	D5 F0 DF		DJNZ B,rshift 	;Now count backwards and repeat until "B" is zero
  452:	  01E2	AB 05			MOV R3,05h 	;Move result to R3/R2
  453:	  01E4	AA 04			MOV R2,04h 	;Move result to R3/R2
  454:	  01E6	22			RET
  455:
  456:
  457:	  01E7			SERIALINT:
  458:	  01E7	20 99 05		JB TI, TRANS; if the interrupt is caused by T1 control is transferred to trans as the old da
				ta has been transferred and new data can be sent to the SBUF
  459:	  01EA	C2 A5			CLR AutoLED
  460:	  01EC	C2 98		        CLR RI; clears RI flag
  461:	  01EE	32		        RETI; transfers control to main
  462:
  463:	  01EF	32		TRANS:	RETI;  transfers control to main
  464:
  465:
  466:
  467:
  468:				END
  469:
  470:





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
AUTODRIVEMODE			  CODE	    00A6	 127
AUTOLED				  NUMBER    00A5	  17
B				  DATA	      F0
BCKMAIN				  CODE	    00A4	 115
CALCDISTANCE			  CODE	    013E	 291
COMMANDWRT			  CODE	    0182	 362
CY				  BIT	      D7
DATABUS				  NUMBER    0090	  38
DATAWRT				  CODE	    018F	 374
DELAY				  CODE	    01A1	 389
DELAY10M			  CODE	    0155	 323
DELAY10MREG			  CODE	    019C	 385
DELAY1M				  CODE	    01AA	 397
DELAYSEC			  CODE	    0165	 335
DELAYSECLOOP			  CODE	    0169	 340
DETECTED			  CODE	    00EB	 195
DETECTEDPIN			  NUMBER    00A6	  19
DIV_16				  CODE	    01AF	 410
DLOOP				  CODE	    00FA	 210
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ECHO				  NUMBER    00A4	  25
ECHOROUTINE			  CODE	    011F	 240
EN				  BIT	      A2	  37
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
JMVBWD				  CODE	    0090	 105
JMVFWD				  CODE	    008B	 103
JMVLEFT				  CODE	    009A	 109
JMVRIGHT			  CODE	    0095	 107
JSTOP				  CODE	    009F	 111

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LCD_F				  BIT	      97	  39
LEFTBACKWARD			  NUMBER    0082	  13
LEFTFORWARD			  NUMBER    0083	  12
LSHIFT				  CODE	    01B7	 415
MAIN				  CODE	    0060	  66
MOVEBACKWARD			  CODE	    00C7	 162
MOVEFORWARD			  CODE	    00BE	 154
MOVELEFT			  CODE	    00D9	 178
MOVERIGHT			  CODE	    00D0	 170
NOOBJ				  CODE	    013D	 286
NORMALMODE			  CODE	    0059	  59
ONLED				  NUMBER    00A7	  18
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PRINT				  CODE	    010F	 228
PRINTDEC			  CODE	    0105	 221
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RESULT				  CODE	    01D8	 443
RI				  BIT	      98
RIGHTBACKWARD			  NUMBER    0080	  15
RIGHTFORWARD			  NUMBER    0081	  14
RS				  BIT	      A0	  35
RS0				  BIT	      D3
RS1				  BIT	      D4
RSHIFT				  CODE	    01C1	 424
RW				  BIT	      A1	  36
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SENDCHAR			  CODE	    017D	 356
SERIALINT			  CODE	    01E7	 457
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
START				  CODE	    0030	  10
STOPCAR				  CODE	    00E2	 186
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 12



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TRANS				  CODE	    01EF	 463
TRIG				  NUMBER    00A3	  24
TRIGAGAIN			  CODE	    00AB	 131
TXD				  BIT	      B1
WR				  BIT	      B6
Y				  CODE	    01A3	 391
