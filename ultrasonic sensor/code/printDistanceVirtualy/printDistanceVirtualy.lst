
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	C:\Microcontroller project\microprocessor\ultrasonic sensor\code\printDistanceVirtualy\printDistanceVirtualy.asm
	Object File:	C:\Microcontroller project\microprocessor\ultrasonic sensor\code\printDistanceVirtualy\printDistanceVirtualy.hex
	List File:	C:\Microcontroller project\microprocessor\ultrasonic sensor\code\printDistanceVirtualy\printDistanceVirtualy.lst



 Line  I  Addr  Code            Source

    1:				;R5 is used in DLOOP for POPing from stack
    2:				;R6 is used in printing, storing ECHO times to be printed
    3:				;R7 is used in all Delays, as counter in DLOOP
    4:		N      0000	ORG 0
    5:
    6:
    7:		B      00A3	TRIG EQU P2.3
    8:	  0000	C2 A3		CLR TRIG               ; sets TRIG as output for sending trigger
    9:
   10:		B      00A4	ECHO EQU P2.4
   11:	  0002	D2 A4		SETB ECHO              ; sets ECHO as input for receiving echo
   12:
   13:		B      0082	USGROUND EQU P0.2
   14:	  0004	D2 82		SETB USGROUND
   15:
   16:
   17:		B	 A0	RS BIT P2.0
   18:		B	 A1	RW BIT P2.1
   19:		B	 A2	EN  BIT P2.2
   20:		D      0090	DATABUS EQU P1
   21:		B	 97	LCD_F BIT P1.7
   22:
   23:				;LCD INITIALIZATION
   24:	  0006	74 38				MOV A, #38H	; INITIATE LCD
   25:	  0008	11 DA				ACALL COMMANDWRT
   26:
   27:	  000A	74 0F				MOV A, #0FH	; DISPLAY ON CURSOR ON
   28:	  000C	11 DA				ACALL COMMANDWRT
   29:
   30:	  000E	74 01				MOV A, #01H	; CLEAR LCD
   31:	  0010	11 DA				ACALL COMMANDWRT
   32:	  0012	74 00		MOV A, #0H
   33:	  0014			MAIN:   ;TRIG CODE
   34:	  0014	D2 A3			SETB TRIG		; starts the trigger pulse
   35:	  0016	11 AF			ACALL Delay10M     	; Delay 10uS width for the trigger pulse
   36:	  0018	C2 A3			CLR TRIG         	; ends the trigger pulse
   37:	  001A	30 A4 FD		JNB ECHO,$    		; loops here until echo is received
   38:
   39:	  001D	11 61			ACALL CalcDistance
   40:
   41:	  001F	11 98			ACALL DelaySec	 ;Delay 1 sec

   42:	  0021	80 F1			SJMP MAIN        ;short jumps to MAIN loop

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   43:
   44:				;Display LOOP for send char to serial port for printing it on virtual terminal
   45:	  0023	74 01		DLOOP:	MOV A, #01H	; CLEAR LCD
   46:	  0025	11 DA			ACALL COMMANDWRT
   47:	  0027	75 89 20		MOV TMOD, #20H	; or 00100000B => Mode 2 for Timer 1 (8bit Auto Reload)
   48:	  002A	75 8D FD		MOV TH1, #0FDH	;Setting BaudRate of 9600 (-3). SMOD is 0 by default
   49:	  002D	75 98 50		MOV SCON, #50H	;Serial Mode 1, REN Enabled or #01010000B
   50:	  0030	D2 8E			SETB TR1
   51:
   52:	  0032	EE			MOV A, R6
   53:	  0033	7F 00			MOV R7, #0D	;Counter to store count of numbers
   54:				;PrintDEC, print => for converting hex value to decimal then print each number
   55:	  0035				PrintDEC:
   56:	  0035	0F				INC R7
   57:	  0036	75 F0 0A			MOV B, #10D
   58:	  0039	84				DIV AB			;the quotient is stored in the accumulator and the remainder
				 is stored in the B register
   59:	  003A	C0 F0				PUSH B
   60:	  003C	B4 00 F6			CJNE A, #0D, PrintDEC	;Compare the first two operands and branches to the specifie
				d destination if their values are not equal
   61:
   62:	  003F	D0 05			print:	POP 05H			;POP to 05H which is R5
   63:	  0041	ED				MOV A, R5
   64:	  0042	24 30				ADD A, #'0'		;Add 0 hex value to print number from 0 to 9
   65:	  0044	F9				MOV R1, A;TODO REMOVE
   66:						;PRINTING A CHARACTER
   67:	  0045	12 00 D5			CALL SENDCHAR
   68:	  0048	E9				MOV A, R1;TODO remove
   69:	  0049	F5 99				MOV SBUF, A
   70:	  004B	30 99 FD			JNB TI, $
   71:	  004E	C2 99				CLR TI
   72:						;ACALL DelaySec		;TODO i think it is not useful
   73:	  0050	DF ED				DJNZ R7, print		;decrements the byte indicated by the first operand and, if
				the resulting value is not zero, branches to the address specified in the second operand.
   74:	  0052	74 20				MOV A, #' '
   75:	  0054	F9				MOV R1, A;TODO REMOVE
   76:						;PRINTING A CHARACTER
   77:	  0055	12 00 D5			CALL SENDCHAR
   78:	  0058	E9				MOV A, R1;TODO remove
   79:	  0059	F5 99				MOV SBUF, A
   80:	  005B	30 99 FD			JNB TI, $
   81:	  005E	C2 99				CLR TI
   82:
   83:	  0060	22		RET
   84:
   85:	  0061			CalcDistance:
   86:					;Loop until ECHO pin is low
   87:	  0061	75 89 01		MOV TMOD, #00000001B	;set timer0 as mode 1 16-bit
   88:					;Start counting ticks from 44103D => AC47
   89:					;MOV TL0, #0EFH
   90:					;MOV TH0, #14H
   91:
   92:	  0064	75 8A 47		MOV TL0, #47H
   93:	  0067	75 8C AC		MOV TH0, #0ACH
   94:
   95:	  006A	D2 8C			SETB TR0	;start timer 0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   96:
   97:					;TODO LOOP while ECHO 1 and TF0 is 0
   98:					;JB ECHO, $	;If ECHO is high loop to echo is 1
   99:					;CLR TR0
  100:
  101:	  006C	20 A4 03		checkecho:JB ECHO, checkof
  102:	  006F	02 00 7F			JMP clear
  103:	  0072	20 8D 02		checkof:JB TF0, restart
  104:	  0075	80 F5				JMP checkecho
  105:
  106:	  0077	C2 A2		restart:CLR P2.2
  107:	  0079	11 98			ACALL DelaySec
  108:	  007B	11 98			ACALL DelaySec
  109:	  007D	D2 A2			SETB P2.2
  110:
  111:	  007F	C2 8C			clear:CLR TR0
  112:
  113:					;Move TH0 to R6 to be printed
  114:					;MOV R6, TH0
  115:					;ACALL DLOOP
  116:
  117:					;Move TL0 to R6 to be printed
  118:					;MOV R6, TL0
  119:					;ACALL DLOOP
  120:
  121:	  0081	C3			CLR C
  122:	  0082	E5 8C			MOV A, TH0
  123:	  0084	94 AC			SUBB A, #0ACH
  124:	  0086	F9			MOV R1, A;for division
  125:
  126:	  0087	C3			CLR C
  127:	  0088	E5 8A			MOV A, TL0
  128:	  008A	94 47			SUBB A, #47H
  129:	  008C	F8			MOV R0, A
  130:
  131:	  008D	7B 00			MOV R3, #0
  132:	  008F	7A 3A			MOV R2, #58D
  133:
  134:	  0091	11 FD			ACALL DIV_16
  135:	  0093	EA			MOV A, R2
  136:	  0094	FE			MOV R6, A
  137:	  0095	11 23			ACALL DLOOP
  138:	  0097	22		RET
  139:
  140:				;TODO store old value of R7
  141:	  0098			DelaySec:
  142:	  0098	75 89 01	    	MOV TMOD, #00000001B ;set timer0 as mode 1 16-bit
  143:	  009B	7F 14		    	MOV R7, #20D
  144:				    	;Timer Clk = 11.0592/12*1 = 0.9216 MHz
  145:					;50000 uS / (1 / 0.9216)uS = 46080 [65536 - 46080 = 19456 => 4C00H]
  146:	  009D				DelaySecLoop:
  147:	  009D	75 8A 00	    		MOV TL0, #00H
  148:	  00A0	75 8C 4C	    		MOV TH0, #4CH
  149:	  00A3	D2 8C		    		SETB TR0	;Start timer 0
  150:
  151:	  00A5	30 8D FD	    		JNB TF0, $	;Loop until Timer 0 overflow = 1

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  152:	  00A8	C2 8C		    		CLR TR0		;Stop timer 0
  153:	  00AA	C2 8D		    		CLR TF0		;Clear overFlow
  154:
  155:	  00AC	DF EF		    		DJNZ R7, DelaySecLoop ;Decrement A then if A != 0 jump to DelaySecLoop
  156:
  157:				;    	POP 07H
  158:	  00AE	22		RET
  159:
  160:				;Delay 10 micro sec
  161:	  00AF			Delay10M:
  162:	  00AF	75 89 01		MOV TMOD, #00000001B ;set timer0 as mode 1 16-bit
  163:	  00B2	75 8A F7		MOV TL0, #0F7H
  164:	  00B5	75 8C FF		MOV TH0, #0FFH
  165:
  166:	  00B8	D2 8C			SETB TR0
  167:
  168:	  00BA	30 8D FD		JNB TF0, $
  169:	  00BD	C2 8C			CLR TR0
  170:	  00BF	C2 8D			CLR TF0
  171:	  00C1	22		RET
  172:
  173:				;Delay 1000 micro sec
  174:	  00C2			Delay1000M:
  175:	  00C2	75 89 01		MOV TMOD, #00000001B ;set timer0 as mode 2 16-bit
  176:	  00C5	75 8A 66		MOV TL0, #66H
  177:	  00C8	75 8C FC		MOV TH0, #0FCH
  178:
  179:	  00CB	D2 8C			SETB TR0
  180:
  181:	  00CD	30 8D FD		JNB TF0, $
  182:	  00D0	C2 8C			CLR TR0
  183:	  00D2	C2 8D			CLR TF0
  184:	  00D4	22		RET
  185:
  186:
  187:				;SENDING A CHARACHTER SUBROUTINE
  188:	  00D5			SENDCHAR:
  189:	  00D5	11 E7			ACALL DATAWRT
  190:	  00D7	11 F4			ACALL DELAY
  191:	  00D9	22			RET
  192:
  193:				;COMMAND SUB-ROUTINE FOR LCD CONTROL
  194:	  00DA			COMMANDWRT:
  195:
  196:	  00DA	F5 90		    	MOV P1, A ;SEND DATA TO P1
  197:	  00DC	C2 A0			CLR RS	;RS=0 FOR COMMAND
  198:	  00DE	C2 A1			CLR RW	;R/W=0 FOR WRITE
  199:	  00E0	D2 A2			SETB EN	;E=1 FOR HIGH PULSE
  200:	  00E2	11 F4			ACALL DELAY
  201:	  00E4	C2 A2			CLR EN	;E=0 FOR H-L PULSE
  202:
  203:	  00E6	22			RET
  204:
  205:				;SUBROUTINE FOR DATA LACTCHING TO LCD
  206:	  00E7			DATAWRT:
  207:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  208:	  00E7	F5 90			MOV DATABUS, A
  209:	  00E9	D2 A0		    	SETB RS	;RS=1 FOR DATA
  210:	  00EB	C2 A1		    	CLR RW
  211:	  00ED	D2 A2		    	SETB EN
  212:	  00EF	11 F4		    	ACALL DELAY
  213:	  00F1	C2 A2			CLR EN
  214:
  215:	  00F3	22			RET
  216:
  217:
  218:
  219:				;DELAY SUBROUTINE
  220:	  00F4			DELAY:
  221:	  00F4	78 0A		    	MOV R0, #10 ;DELAY. HIGHER VALUE FOR FASTER CPUS
  222:	  00F6	79 FF		Y:	MOV R1, #255
  223:	  00F8	D9 FE			DJNZ R1, $
  224:	  00FA	D8 FA			DJNZ R0, Y
  225:
  226:	  00FC	22			RET
  227:
  228:				;16bit division
  229:				; R1 R0
  230:				; / R3 R2
  231:				; = R3 R2
  232:				; shift left the divisor such that the number of digits
  233:				; in the divisor is the same as the number of digits in the dividend
  234:				; shift right the divisor and substract this shifted divisor from the dividend
  235:				; repeat the process again until the divisor has shifted into its original position
  236:	  00FD			DIV_16:
  237:	  00FD	C3			CLR C 	;Clear carry initially
  238:	  00FE	7C 00			MOV R4,#00h	;Clear R4 working variable initially
  239:	  0100	7D 00			MOV R5,#00h	;CLear R5 working variable initially
  240:	  0102	75 F0 00		MOV B,#00h 	;Clear B since B will count the number of left-shifted bits
  241:	  0105			lshift:
  242:	  0105	05 F0			INC B 	;Increment counter for each left shift
  243:	  0107	EA			MOV A,R2 	;Move the current divisor low byte into the accumulator
  244:	  0108	33			RLC A 	;Shift low-byte left, rotate through carry to apply highest bit to high-byte
  245:	  0109	FA			MOV R2,A 	;Save the updated divisor low-byte
  246:	  010A	EB			MOV A,R3 	;Move the current divisor high byte into the accumulator
  247:	  010B	33			RLC A 	;Shift high-byte left high, rotating in carry from low-byte
  248:	  010C	FB			MOV R3,A 	;Save the updated divisor high-byte
  249:	  010D	50 F6			JNC lshift 	;Repeat until carry flag is set from high-byte
  250:	  010F			rshift: 		;Shift right the divisor
  251:	  010F	EB			MOV A,R3 	;Move high-byte of divisor into accumulator
  252:	  0110	13			RRC A 	;Rotate high-byte of divisor right and into carry
  253:	  0111	FB			MOV R3,A 	;Save updated value of high-byte of divisor
  254:	  0112	EA			MOV A,R2 	;Move low-byte of divisor into accumulator
  255:	  0113	13			RRC A 	;Rotate low-byte of divisor right, with carry from high-byte
  256:	  0114	FA			MOV R2,A 	;Save updated value of low-byte of divisor
  257:	  0115	C3			CLR C 	;Clear carry, we don't need it anymore
  258:	  0116	89 07			MOV 07h,R1 	;Make a safe copy of the dividend high-byte
  259:	  0118	88 06			MOV 06h,R0 	;Make a safe copy of the dividend low-byte
  260:	  011A	E8			MOV A,R0 	;Move low-byte of dividend into accumulator
  261:	  011B	9A			SUBB A,R2 	;Dividend - shifted divisor = result bit (no factor, only 0 or 1)
  262:	  011C	F8			MOV R0,A 	;Save updated dividend
  263:	  011D	E9			MOV A,R1 	;Move high-byte of dividend into accumulator

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  264:	  011E	9B			SUBB A,R3 	;Subtract high-byte of divisor (all together 16-bit substraction)
  265:	  011F	F9			MOV R1,A 	;Save updated high-byte back in high-byte of divisor
  266:	  0120	50 04			JNC result 	;If carry flag is NOT set, result is 1
  267:	  0122	A9 07			MOV R1,07h 	;Otherwise result is 0, save copy of divisor to undo subtraction
  268:	  0124	A8 06			MOV R0,06h
  269:	  0126			result:
  270:	  0126	B3			CPL C 	;Invert carry, so it can be directly copied into result
  271:	  0127	EC			MOV A,R4
  272:	  0128	33			RLC A 	;Shift carry flag into temporary result
  273:	  0129	FC			MOV R4,A
  274:	  012A	ED			MOV A,R5
  275:	  012B	33			RLC A
  276:	  012C	FD			MOV R5,A
  277:	  012D	D5 F0 DF		DJNZ B,rshift 	;Now count backwards and repeat until "B" is zero
  278:	  0130	AB 05			MOV R3,05h 	;Move result to R3/R2
  279:	  0132	AA 04			MOV R2,04h 	;Move result to R3/R2
  280:	  0134	22			RET
  281:
  282:
  283:	  0135			close:
  284:					END





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CALCDISTANCE			  CODE	    0061	  85
CHECKECHO			  CODE	    006C	 101
CHECKOF				  CODE	    0072	 103
CLEAR				  CODE	    007F	 111
CLOSE				  CODE	    0135	 283
COMMANDWRT			  CODE	    00DA	 194
CY				  BIT	      D7
DATABUS				  NUMBER    0090	  20
DATAWRT				  CODE	    00E7	 206
DELAY				  CODE	    00F4	 220
DELAY1000M			  CODE	    00C2	 174
DELAY10M			  CODE	    00AF	 161
DELAYSEC			  CODE	    0098	 141
DELAYSECLOOP			  CODE	    009D	 146
DIV_16				  CODE	    00FD	 236
DLOOP				  CODE	    0023	  45
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ECHO				  NUMBER    00A4	  10
EN				  BIT	      A2	  19
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
LCD_F				  BIT	      97	  21
LSHIFT				  CODE	    0105	 241
MAIN				  CODE	    0014	  33
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
P3				  DATA	      B0
PCON				  DATA	      87
PRINT				  CODE	    003F	  62
PRINTDEC			  CODE	    0035	  55
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RESTART				  CODE	    0077	 106
RESULT				  CODE	    0126	 269
RI				  BIT	      98
RS				  BIT	      A0	  17
RS0				  BIT	      D3
RS1				  BIT	      D4
RSHIFT				  CODE	    010F	 250
RW				  BIT	      A1	  18
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SENDCHAR			  CODE	    00D5	 188
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TRIG				  NUMBER    00A3	   7
TXD				  BIT	      B1
USGROUND			  NUMBER    0082	  13
WR				  BIT	      B6
Y				  CODE	    00F6	 222
